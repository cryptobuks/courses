import type { Bud } from '@roots/bud-framework';
import { Service } from '@roots/bud-framework/service';
import type { Env as Base } from '@roots/bud-framework/services';
import Container from '@roots/container';
/**
 * Env service
 *
 * @public
 */
export default class Env extends Service implements Base.Service {
    /**
     * Service label
     *
     * @public
     */
    static label: string;
    /**
     * Env data
     *
     * @public
     */
    data: Container;
    /**
     * Has env value
     *
     * @public
     * @deprecated use {@link Env.data.has} instead
     */
    has: Container['has'];
    /**
     * Get env value
     *
     * @public
     * @deprecated use {@link Env.data.get} instead
     */
    get: Container['get'];
    /**
     * Set env value
     *
     * @public
     * @deprecated Use {@link Env.data.set} instead
     */
    set: Container['set'];
    /**
     * Is env value a string
     *
     * @public
     * @deprecated use {@link Env.data.isString} instead
     */
    isString: Container['isString'];
    /**
     * Is env value a function
     *
     * @public
     * @deprecated use {@link Env.data.isFunction} instead
     */
    isFunction: Container['isFunction'];
    /**
     * Class constructor
     *
     * @public
     */
    constructor(app: Bud);
    /**
     * Bootstrap event callback
     *
     * @public
     * @decorator `@bind`
     */
    bootstrap(): Promise<void>;
    /**
     * Get entries from .env which include `APP_PUBLIC` in their name
     *
     * @public
     * @decorator `@bind`
     * @decorator `@once`
     */
    getPublicEnv(): Record<string, any>;
    /**
     * Transform public env
     *
     * @public
     * @decorator `@bind`
     */
    transformPublicEnv([rawKey, rawValue]: [string, string]): string[];
    /**
     * Filter public env
     *
     * @public
     */
    filterPublicEnv([key]: [string, string]): boolean;
}
//# sourceMappingURL=index.d.ts.map