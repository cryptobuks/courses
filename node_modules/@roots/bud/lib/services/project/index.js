import { __decorate } from "tslib";
import { Service as BaseService } from '@roots/bud-framework/service';
import { bind } from '@roots/bud-support/decorators';
import * as fs from '@roots/bud-support/fs';
import { omit } from '@roots/bud-support/lodash-es';
import format from '@roots/bud-support/pretty-format';
/**
 * Project service
 *
 * @public
 */
export default class Project extends BaseService {
    /**
     * `build.after` hook callback
     *
     * @public
     */
    async buildAfter() {
        if (!this.app.context.args.debug) {
            this.app.info(`--debug not \`true\`. skipping fs write.`);
            return;
        }
        try {
            const path = this.app.path(`@storage`, this.app.label, `profile.json`);
            await fs.ensureFile(path);
            await fs.writeFile(path, this.app.json.stringify({
                context: omit(this.app.context, `env`, `stdout`, `stderr`, `stdin`, `stdio`),
                extensions: this.app.extensions.repository,
                hooks: {
                    sync: this.app.hooks.syncStore.store,
                    async: this.app.hooks.asyncStore.store,
                    actions: this.app.hooks.events.store,
                },
            }, null, 2));
            this.app.success(`profile written to `, path);
        }
        catch (error) {
            this.app.error(`failed to write profile`, error);
        }
        try {
            const path = this.app.path(`@storage`, this.app.label, `webpack.config.dump`);
            await fs.ensureFile(path);
            await fs.writeFile(path, format(this.app.build.config));
            this.app.success(`webpack.config.dump written to`, path);
        }
        catch (error) {
            this.app.error(`failed to write webpack.config.dump`, error);
        }
    }
}
/**
 * Service label
 *
 * @public
 */
Project.label = `project`;
__decorate([
    bind
], Project.prototype, "buildAfter", null);
//# sourceMappingURL=index.js.map