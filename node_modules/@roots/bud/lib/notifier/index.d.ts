/// <reference types="node" />
import type { Bud } from '@roots/bud-framework';
import { Notification, NotificationCallback, NotificationCenter } from 'node-notifier';
import type { StatsCompilation } from 'webpack';
/**
 * Notification center
 *
 * @public
 */
interface NotificationCenter {
    notify(notification?: Notification, callback?: NotificationCallback): NotificationCenter;
}
/**
 * Notifier
 *
 * @public
 */
export declare class Notifier {
    app: Bud;
    /**
     * Node notifier notification center
     *
     * @public
     */
    notificationCenter: NotificationCenter;
    /**
     * Get user editor from env
     *
     * @public
     */
    get editor(): any;
    /**
     * compilation stats accessor
     *
     * @public
     */
    get jsonStats(): StatsCompilation;
    /**
     * Notice title
     *
     * @public
     */
    get title(): string;
    /**
     * Notice group
     *
     * @public
     */
    get group(): string;
    /**
     * Notice message
     * @public
     */
    get message(): "Compiled with errors" | "Compiled with warnings" | "Compiled without errors";
    /**
     * Open URL
     *
     * @public
     */
    get open(): string;
    /**
     * Class constructor
     *
     * @public
     */
    constructor(app: Bud);
    /**
     * Open browser in development
     *
     * @public
     * @decorator `@bind`
     * @decorator `@once`
     */
    openBrowser(): Promise<import("child_process").ChildProcess>;
    /**
     * Open editor on error
     *
     * @public
     * @decorator `@bind`
     */
    openEditor(errors: Array<any>): Bud;
    /**
     * Notifications
     *
     * @public
     * @decorator `@bind`
     */
    notify(): Promise<void>;
    /**
     * node notifier callback
     *
     * @public
     * @decorator `@bind`
     */
    callback(error: Error, response: any, metadata: any): Promise<void>;
}
export {};
//# sourceMappingURL=index.d.ts.map