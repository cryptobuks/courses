import { __decorate } from "tslib";
import { Extension } from '@roots/bud-framework';
import { bind, label, options, plugin, } from '@roots/bud-framework/extension/decorators';
import { WebpackManifestPlugin, } from 'webpack-manifest-plugin';
/**
 * `webpack-manifest-plugin` adapter
 *
 * @public
 * @decorator `@label`
 * @decorator `@plugin`
 * @decorator `@options`
 */
let BudWebpackManifestPlugin = class BudWebpackManifestPlugin extends Extension {
    /**
     * `when` callback
     *
     * @remarks
     * Returns `feature.manifest` hook result
     *
     * @public
     * @decorator `@bind`
     */
    async when() {
        return (this.app.hooks.filter(`feature.manifest`) &&
            this.app.context.args.manifest !== false);
    }
};
__decorate([
    bind
], BudWebpackManifestPlugin.prototype, "when", null);
BudWebpackManifestPlugin = __decorate([
    label(`webpack-manifest-plugin`),
    plugin(WebpackManifestPlugin),
    options({
        fileName: `manifest.json`,
        writeToFileEmit: true,
        publicPath: ({ hooks }) => (hooks.filter(`build.output.publicPath`) ?? ``).replace(`auto`, ``),
    })
], BudWebpackManifestPlugin);
export default BudWebpackManifestPlugin;
//# sourceMappingURL=index.js.map