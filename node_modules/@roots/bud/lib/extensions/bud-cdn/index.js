import { __decorate } from "tslib";
import { Extension } from '@roots/bud-framework/extension';
import { bind, expose, label, options, } from '@roots/bud-framework/extension/decorators';
import { isFunction, isString, isUndefined, } from '@roots/bud-support/lodash-es';
import Webpack from 'webpack';
/**
 * Include remote modules in compilation
 *
 * @public
 * @decorator `@label`
 * @decorator `@expose`
 * @decorator `@options`
 */
let Cdn = class Cdn extends Extension {
    constructor() {
        super(...arguments);
        /**
         * CDN manifest key to URL mapping
         *
         * @public
         */
        this.sources = new Map([
            [`gist`, `https://gist.githubusercontent.com/`],
            [`github`, `https://raw.githubusercontent.com/`],
            [`unpkg`, `https://unpkg.com/`],
            [`skypack`, `https://cdn.skypack.dev/`],
        ]);
        /**
         * Whether to cache modules locally
         *
         * @public
         */
        this.cacheEnabled = true;
    }
    /**
     * Disable local caching of modules
     *
     * @public
     */
    disableCache() {
        this.cacheEnabled = false;
        return this;
    }
    /**
     * Register CDN
     *
     * @public
     */
    registerSource(name, url) {
        this.sources.set(name, url);
        return this;
    }
    /**
     * Allowed URIs getter/setter
     *
     * @public
     */
    get allowedUris() {
        return Array.from(new Set([
            ...(this.app.maybeCall(this.getOption(`allowedUris`)) ?? []),
            ...(this.sources.values() ?? []),
        ])).filter(v => typeof v === `string` || v instanceof RegExp || isFunction(v));
    }
    set allowedUris(value) {
        this.setOption(`allowedUris`, value);
    }
    /**
     * Cache location getter/setter
     *
     * @public
     */
    get cacheLocation() {
        return this.app.maybeCall(this.getOption(`cacheLocation`));
    }
    set cacheLocation(value) {
        this.setOption(`cacheLocation`, value);
    }
    /**
     * Frozen getter/setter
     *
     * @public
     */
    get frozen() {
        return this.app.maybeCall(this.getOption(`frozen`));
    }
    set frozen(value) {
        this.setOption(`frozen`, value);
    }
    /**
     * Lockfile location getter/setter
     *
     * @public
     */
    get lockfileLocation() {
        return this.getOption(`lockfileLocation`);
    }
    set lockfileLocation(value) {
        this.setOption(`lockfileLocation`, value);
    }
    /**
     * Proxy getter/setter
     *
     * @public
     */
    get proxy() {
        return this.app.maybeCall(this.getOption(`proxy`));
    }
    set proxy(value) {
        this.setOption(`proxy`, value);
    }
    /**
     * Upgrade location getter/setter
     *
     * @public
     */
    get upgrade() {
        return this.app.maybeCall(this.getOption(`upgrade`));
    }
    set upgrade(value) {
        this.setOption(`upgrade`, value);
    }
    /**
     * Set allowed URLs
     *
     * @public
     * @decorator `@bind`
     */
    setAllowedUris(value) {
        this.allowedUris = value;
        return this;
    }
    /**
     * Set cache location
     *
     * @public
     * @decorator `@bind`
     */
    setCacheLocation(value) {
        this.cacheLocation = value;
        return this;
    }
    /**
     * Freeze?
     *
     * @public
     * @decorator `@bind`
     */
    freeze(value) {
        this.frozen = !isUndefined(value) ? value : true;
        return this;
    }
    /**
     * Set lockfile location
     *
     * @public
     * @decorator `@bind`
     */
    setLockfileLocation(value) {
        this.lockfileLocation = value;
        return this;
    }
    /**
     * Set proxy location
     *
     * @public
     * @decorator `@bind`
     */
    setProxy(value) {
        this.proxy = value;
        return this;
    }
    /**
     * Set upgrade
     *
     * @public
     * @decorator `@bind`
     */
    setUpgrade(value) {
        this.upgrade = value;
        return this;
    }
    async beforeBuild() {
        for (const cdnKey of this.sources.keys()) {
            this.logger.log(`registering`, cdnKey);
            this.app.context.manifest?.bud?.[cdnKey] && this.enable();
        }
    }
    /**
     * `buildBefore` callback
     *
     * @public
     * @decorator `@bind`
     */
    async buildBefore() {
        this.app.hooks.on(`build.experiments`, experiments => ({
            ...(experiments ?? {}),
            buildHttp: {
                allowedUris: this.allowedUris,
                cacheLocation: this.cacheEnabled ? this.cacheLocation : false,
                frozen: this.frozen,
                lockfileLocation: this.lockfileLocation,
                proxy: isString(this.proxy) ? this.proxy : undefined,
                upgrade: this.upgrade,
            },
        }));
        for (const source of this.sources.entries()) {
            const cdn = {
                ident: source[0],
                url: source[1],
                schema: `${source[0]}:`,
            };
            await this.app.extensions.add({
                label: `bud-cdn-${cdn.ident}`,
                make: async () => new Webpack.NormalModuleReplacementPlugin(new RegExp(`^${cdn.schema}`), result => {
                    result.request = result.request.replace(cdn.schema, cdn.url);
                }),
            });
            if (isUndefined(this.app.context.manifest?.bud?.[cdn.ident]))
                return;
            const manifest = this.app.context.manifest.bud[cdn.ident];
            const imports = Array.isArray(manifest)
                ? manifest.map(signifier => [signifier, signifier])
                : Object.entries(manifest).map(([base, params]) => [
                    base,
                    `${base}@${params}`,
                ]);
            await Promise.all(imports.map(async ([signifier, remotePath]) => {
                await this.app.extensions.add({
                    label: `bud-cdn-${cdn.ident}-${remotePath}`,
                    make: async () => new Webpack.NormalModuleReplacementPlugin(new RegExp(`^${signifier}`), result => {
                        result.request = result.request.replace(signifier, [cdn.url, remotePath].join(``));
                    }),
                });
            }));
        }
    }
};
__decorate([
    bind
], Cdn.prototype, "disableCache", null);
__decorate([
    bind
], Cdn.prototype, "registerSource", null);
__decorate([
    bind
], Cdn.prototype, "setAllowedUris", null);
__decorate([
    bind
], Cdn.prototype, "setCacheLocation", null);
__decorate([
    bind
], Cdn.prototype, "freeze", null);
__decorate([
    bind
], Cdn.prototype, "setLockfileLocation", null);
__decorate([
    bind
], Cdn.prototype, "setProxy", null);
__decorate([
    bind
], Cdn.prototype, "setUpgrade", null);
__decorate([
    bind
], Cdn.prototype, "beforeBuild", null);
__decorate([
    bind
], Cdn.prototype, "buildBefore", null);
Cdn = __decorate([
    label(`cdn`),
    expose(`cdn`),
    options({
        allowedUris: [],
        cacheLocation: (app) => app.path(`@storage`, app.label, `modules`),
        frozen: false,
        lockfileLocation: (app) => app.path(`@storage`, app.label, `bud.lock`),
        proxy: ({ env }) => env.isString(`HTTP_PROXY`) && env.get(`HTTP_PROXY`),
        upgrade: true,
    })
], Cdn);
export default Cdn;
//# sourceMappingURL=index.js.map