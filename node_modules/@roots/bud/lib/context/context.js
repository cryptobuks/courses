import Args from './args.js';
import BudContext from './bud.js';
import Config from './config.js';
import Env from './env.js';
import Extensions from './extensions.js';
import Services from './services.js';
let contexts = {};
export default class Context {
    constructor() {
        this.data = {
            basedir: null,
            label: null,
            mode: null,
            bud: null,
            config: null,
            args: null,
            env: null,
            manifest: null,
            services: null,
            extensions: null,
            stdin: process.stdin,
            stdout: process.stdout,
            stderr: process.stderr,
            colorDepth: 256,
        };
    }
    async make(basedir) {
        if (contexts[basedir])
            return contexts[basedir];
        this.data.basedir = basedir;
        this.data.args = new Args(basedir).data;
        this.data.env = new Env(basedir).data;
        this.data.config = await new Config()
            .find(basedir)
            .then(config => config.data);
        if (this.data.config[`package.json`])
            this.data.manifest = this.data.config[`package.json`].module;
        this.data.bud = await new BudContext().find().then(({ data }) => data);
        this.data.extensions = await new Extensions(this.data.manifest)
            .find()
            .then(({ data }) => data);
        this.data.services = Services.data;
        contexts[basedir] = this.data;
        return contexts[basedir];
    }
}
//# sourceMappingURL=context.js.map