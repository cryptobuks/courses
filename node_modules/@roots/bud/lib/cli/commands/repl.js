import { Command, Option } from '@roots/bud-support/clipanion';
import { highlight } from '@roots/bud-support/highlight';
import { chunk } from '@roots/bud-support/lodash-es';
import format from '@roots/bud-support/pretty-format';
import BaseCommand from './base.js';
let React;
let Ink;
let TextInput;
/**
 * `bud repl` command
 *
 * @public
 */
export default class ReplCommand extends BaseCommand {
    constructor() {
        super(...arguments);
        this.dry = true;
        this.notify = false;
        this.log = false;
        this.color = Option.Boolean(`--color,-c`, true, {
            description: `use syntax highlighting`,
        });
        this.indent = Option.String(`--indent,-i`, `1`, {
            description: `indentation level`,
            tolerateBoolean: false,
        });
        this.depth = Option.String(`--depth,-d`, `1`, {
            description: `recursion depth`,
            tolerateBoolean: false,
        });
    }
    /**
     * Command execute
     * @public
     */
    async runCommand() {
        await this.app.build.make();
        render({ app: this.app, indent: this.indent, depth: this.depth });
    }
}
/**
 * Command paths
 * @public
 */
ReplCommand.paths = [[`repl`]];
/**
 * Command usage
 * @public
 */
ReplCommand.usage = Command.Usage({
    description: `Use bud in a repl`,
    examples: [[`repl`, `$0 repl`]],
});
const render = async ({ app, indent, depth }) => {
    React = await import(`@roots/bud-support/react`).then(({ default: React }) => React);
    TextInput = await import(`@roots/bud-support/ink-text-input`).then(({ Prompt }) => Prompt);
    Ink = await import(`@roots/bud-support/ink`);
    Ink.render(React.createElement(Repl, { app: app, indent: indent, depth: depth }));
};
const Repl = ({ app, indent, depth }) => {
    const [search, setSearch] = React.useState(``);
    const [result, setResult] = React.useState(``);
    const [paged, setPaged] = React.useState([]);
    const [page, setPage] = React.useState(0);
    const pageSize = Math.max(10, 1);
    Ink.useInput((input, key) => {
        if (key.escape) {
            // eslint-disable-next-line
            process.exit();
        }
        if (key.upArrow) {
            page >= 1 ? setPage(page - 1) : setPage(paged.length - 1);
        }
        if (key.downArrow) {
            page < paged.length - 1 ? setPage(page + 1) : setPage(0);
        }
        if (key.return) {
            setSearch(``);
            setResult(``);
            setPaged([]);
        }
    });
    React.useEffect(() => {
        if (result) {
            setPaged(chunk(result.split(`\n`), pageSize).map(page => page.join(`\n`)));
        }
    }, [result, pageSize]);
    React.useEffect(() => {
        if (page > paged.length) {
            setPage(paged.length - 1);
        }
    }, [page, paged]);
    const makeFn = (value) => eval(`async (bud) => ${value};`);
    const processResults = (raw) => {
        if (raw === undefined) {
            setResult(``);
            return;
        }
        try {
            const result = highlight(format(raw, {
                indent: parseInt(indent),
                maxDepth: parseInt(depth),
            }));
            setResult(result);
        }
        catch (e) {
            setResult(e.message);
        }
    };
    const onSubmit = (value) => {
        setSearch(``);
        try {
            makeFn(value)(app).then(async (results) => {
                processResults(results);
                await app.api.processQueue();
            });
        }
        catch (err) {
            setResult(err.message);
        }
    };
    return (React.createElement(Ink.Box, { marginY: 1, flexDirection: "column" },
        React.createElement(Ink.Box, { flexDirection: "row", justifyContent: "space-between" },
            React.createElement(Ink.Box, { flexDirection: "row", justifyContent: "flex-start" },
                React.createElement(TextInput, { value: search, onChange: setSearch, onSubmit: onSubmit })),
            paged.length > 0 ? (React.createElement(Ink.Box, { flexDirection: "row", justifyContent: "flex-start", marginTop: 1 },
                React.createElement(Ink.Text, null, "page "),
                React.createElement(Ink.Text, null, page + 1),
                React.createElement(Ink.Text, null, "/"),
                React.createElement(Ink.Text, null, paged.length))) : null),
        paged[page] ? (React.createElement(Ink.Box, { flexDirection: "column", justifyContent: "flex-start" },
            React.createElement(Ink.Text, null, paged[page]))) : null));
};
//# sourceMappingURL=repl.js.map