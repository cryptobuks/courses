/// <reference types="react" />
import type * as Options from '@roots/bud-framework/options';
import { BaseContext, Command } from '@roots/bud-support/clipanion';
import type Bud from '../../bud.js';
import { Notifier } from '../../notifier/index.js';
/**
 * Base command
 *
 * @public
 */
export default abstract class BaseCommand extends Command {
    /**
     * Command usage
     * @public
     */
    static usage: import("@roots/bud-support/clipanion").Usage;
    /**
     * Application
     * @public
     */
    app: Bud;
    /**
     * Context
     * @public
     */
    context: Options.Context & BaseContext;
    /**
     * Node notifier
     * @public
     */
    notifier: Notifier;
    /**
     * Run command
     * @virtual
     * @public
     */
    runCommand?(): Promise<unknown>;
    /**
     * --basedir
     * @public
     */
    basedir: string;
    /**
     * --src
     * @public
     */
    input: string;
    /**
     * --dist
     * @public
     */
    output: string;
    /**
     * -- dry
     * @public
     */
    dry: boolean;
    /**
     * --inject
     * @public
     */
    discovery: boolean;
    /**
     * --level
     */
    level: Boolean[];
    /**
     * --log
     */
    log: boolean;
    /**
     * --mode
     * @public
     */
    mode: "development" | "production";
    /**
     * --notify
     * @public
     */
    notify: boolean;
    /**
     * --target
     */
    target: string[];
    /**
     * Base arguments
     * @public
     */
    get baseArgs(): {
        basedir: string;
        input: string;
        output: string;
        dry: boolean;
        level: Boolean[];
        log: boolean;
        mode: "development" | "production";
        notify: boolean;
        target: string[];
    };
    /**
     * @virtual
     * @public
     */
    get args(): Options.Context[`args`];
    /**
     * Application logger
     *
     * @public
     */
    get logger(): import("signale").Signale<import("signale").DefaultMethods>;
    /**
     * Render ink component
     *
     * @param box - Ink box
     * @returns
     */
    renderOnce(children: React.ReactElement): Promise<void>;
    /**
     * Render ink component
     *
     * @param box - Ink box
     * @returns
     */
    text(text: string): Promise<void>;
    /**
     * Render ink component
     *
     * @param box - Ink box
     * @returns
     */
    view(children: React.ReactElement): Promise<any>;
    /**
     * Execute command
     *
     * @public
     */
    execute(): Promise<void>;
}
//# sourceMappingURL=base.d.ts.map