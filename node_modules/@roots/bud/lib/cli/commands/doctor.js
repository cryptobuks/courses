import { __decorate } from "tslib";
import { Command } from '@roots/bud-support/clipanion';
import { bind } from '@roots/bud-support/decorators';
import { Box, Text } from '@roots/bud-support/ink';
import React from '@roots/bud-support/react';
import webpack from 'webpack';
import BaseCommand from './base.js';
/**
 * `bud doctor` command
 *
 * @public
 */
export default class DoctorCommand extends BaseCommand {
    constructor() {
        super(...arguments);
        this.dry = true;
    }
    get args() {
        return { ...this.context.args, dry: true };
    }
    /**
     * Command execute
     *
     * @public
     */
    async runCommand() {
        this.renderOnce(React.createElement(Box, { marginBottom: 1 },
            React.createElement(Text, null, "Checking configuration...")));
        await this.checkConfiguration();
        this.renderOnce(React.createElement(Box, { marginY: 1 },
            React.createElement(Text, null, "Checking dependencies...")));
        await this.checkDependencies();
    }
    async checkConfiguration() {
        const conf = this.app.build.make();
        if (!conf) {
            return this.renderOnce(React.createElement(Box, null,
                React.createElement(Text, { color: "red" }, "config not returned from bud compiler")));
        }
        try {
            webpack.validate(conf);
            this.renderOnce(React.createElement(Box, null,
                React.createElement(Text, { color: "green" }, "\u2705 configuration is valid")));
        }
        catch (error) {
            this.renderOnce(React.createElement(Box, null,
                React.createElement(Text, { color: "red" }, "configuration is invalid"),
                React.createElement(Text, null, error?.message ?? error)));
        }
    }
    async checkDependencies() {
        const mismatches = Object.entries({
            ...(this.app.context.manifest?.dependencies ?? {}),
            ...(this.app.context.manifest?.devDependencies ?? {}),
        })
            .filter(([name]) => name.startsWith(`@roots/`))
            .filter(([k, v]) => v !== this.app.context.bud.version);
        if (!mismatches?.length) {
            this.renderOnce(React.createElement(Box, null,
                React.createElement(Text, { color: "green" },
                    "\u2705 all dependencies set to ",
                    this.app.context.bud.version)));
        }
        mismatches.map(([k, v]) => {
            this.renderOnce(React.createElement(Box, null,
                React.createElement(Text, { color: "red" }, "version mismatch"),
                React.createElement(Box, { flexDirection: "column", paddingLeft: 1, paddingBottom: 1 },
                    React.createElement(Text, null,
                        "bud is on",
                        ` `,
                        React.createElement(Text, { color: "blue" }, this.app.context.bud.version),
                        " but",
                        ` `,
                        k,
                        ` `,
                        "is on ",
                        React.createElement(Text, { color: "blue" }, v)))));
        });
    }
}
/**
 * Command paths
 * @public
 */
DoctorCommand.paths = [[`doctor`]];
/**
 * Command usage
 *
 * @public
 */
DoctorCommand.usage = Command.Usage({
    description: `Check project for common errors`,
    details: `\
The \`bud doctor\` command will:

1. validate the \`production\` configuration with \`webpack\`

\`webpack\` exports a \`validate\` function which is used by this command to verify that
the configuration matches the \`webpack\` configuration schema.

2. check the \`dependencies\` and \`devDependencies\` in the \`package.json\` file.

In general, \`bud.js\` dependencies should be kept at the same version. This script doesn't account
for a lot of edge cases so it might return a false positive.
`,
    examples: [
        [`Check compiled configuration against webpack`, `$0 doctor`],
    ],
});
__decorate([
    bind
], DoctorCommand.prototype, "checkConfiguration", null);
__decorate([
    bind
], DoctorCommand.prototype, "checkDependencies", null);
//# sourceMappingURL=doctor.js.map