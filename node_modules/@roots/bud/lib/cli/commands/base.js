import { __decorate } from "tslib";
import { Command, Option } from '@roots/bud-support/clipanion';
import { bind, once } from '@roots/bud-support/decorators';
import * as t from '@roots/bud-support/typanion';
import { factory } from '../../factory/index.js';
import { Notifier } from '../../notifier/index.js';
import Render from '../render.js';
/**
 * Base command
 *
 * @public
 */
export default class BaseCommand extends Command {
    constructor() {
        super(...arguments);
        /**
         * --basedir
         * @public
         */
        this.basedir = Option.String(`--basedir,--cwd`, undefined, {
            description: `project base directory`,
            env: `APP_BASE_DIR`,
            hidden: true,
        });
        /**
         * --src
         * @public
         */
        this.input = Option.String(`--input,-i,--@src,--src`, undefined, {
            description: `Source directory (relative to project)`,
            env: `APP_PATH_INPUT`,
        });
        /**
         * --dist
         * @public
         */
        this.output = Option.String(`--output,-o,--@dist,--dist`, undefined, {
            description: `Distribution directory (relative to project)`,
            env: `APP_PATH_OUTPUT`,
        });
        /**
         * -- dry
         * @public
         */
        this.dry = Option.Boolean(`--dry`, false, {
            description: `Run without webpack or server process`,
            hidden: true,
        });
        /**
         * --inject
         * @public
         */
        this.discovery = Option.Boolean(`--discovery`, true, {
            description: `Automatically search for and register extensions`,
            hidden: true,
        });
        /**
         * --level
         */
        this.level = Option.Array(`-v`, undefined, {
            description: `Set logging level`,
            hidden: true,
        });
        /**
         * --log
         */
        this.log = Option.Boolean(`--log`, undefined, {
            description: `Enable logging`,
            hidden: true,
        });
        /**
         * --mode
         * @public
         */
        this.mode = Option.String(`--mode`, undefined, {
            description: `Compilation mode`,
            validator: t.isOneOf([
                t.isLiteral(`production`),
                t.isLiteral(`development`),
            ]),
            env: `APP_MODE`,
            hidden: true,
        });
        /**
         * --notify
         * @public
         */
        this.notify = Option.Boolean(`--notify`, true, {
            description: `Enable notfication center messages`,
        });
        /**
         * --target
         */
        this.target = Option.Array(`--target,-t`, undefined, {
            description: `Limit compilation to particular compilers`,
            hidden: true,
        });
    }
    /**
     * Base arguments
     * @public
     */
    get baseArgs() {
        return {
            basedir: this.basedir,
            input: this.input,
            output: this.output,
            dry: this.dry,
            level: this.level,
            log: this.log,
            mode: this.mode,
            notify: this.notify,
            target: this.target,
        };
    }
    /**
     * @virtual
     * @public
     */
    get args() {
        return {};
    }
    /**
     * Application logger
     *
     * @public
     */
    get logger() {
        return this.app.logger.instance;
    }
    /**
     * Render ink component
     *
     * @param box - Ink box
     * @returns
     */
    async renderOnce(children) {
        return this.log !== false && Render.once({ children });
    }
    /**
     * Render ink component
     *
     * @param box - Ink box
     * @returns
     */
    async text(text) {
        return this.log !== false && Render.text(text);
    }
    /**
     * Render ink component
     *
     * @param box - Ink box
     * @returns
     */
    async view(children) {
        if (this.log === false)
            return;
        return Render.view({ children });
    }
    /**
     * Execute command
     *
     * @public
     */
    async execute() {
        this.context = {
            ...this.context,
            mode: this.args?.mode ?? this.baseArgs.mode ?? this.context.mode,
            args: {
                ...this.context.args,
                ...this.baseArgs,
                ...(this.args ?? {}),
            },
        };
        this.app = await factory(this.context);
        if (this.runCommand)
            await this.runCommand();
        if (this.notify !== false)
            this.app.hooks.action(`compiler.close`, async () => new Notifier(this.app).notify());
    }
}
/**
 * Command usage
 * @public
 */
BaseCommand.usage = Command.Usage({
    description: `Run \`bud --help\` for usage information`,
    details: `\
      \`bud build production\` compiles source assets in \`production\` mode. Run \`bud build production --help\` for usage.

      \`bud build development\` compiles source assets in \`development\` mode and serves updated modules. Run \`bud build development --help\` for usage.
    `,
    examples: [[`compile source assets`, `$0 build`]],
});
__decorate([
    bind
], BaseCommand.prototype, "renderOnce", null);
__decorate([
    bind
], BaseCommand.prototype, "text", null);
__decorate([
    bind
], BaseCommand.prototype, "view", null);
__decorate([
    bind,
    once
], BaseCommand.prototype, "execute", null);
//# sourceMappingURL=base.js.map