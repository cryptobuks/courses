import { __decorate } from "tslib";
import { Command, Option } from '@roots/bud-support/clipanion';
import { bind } from '@roots/bud-support/decorators';
import { ensureDir, remove } from '@roots/bud-support/fs';
import { Box, Text } from '@roots/bud-support/ink';
import React from '@roots/bud-support/react';
import BaseCommand from './base.js';
export default class CleanCommand extends BaseCommand {
    constructor() {
        super(...arguments);
        this.notify = Option.Boolean(`--notify`, false, { hidden: true });
        this.storage = Option.Boolean(`@storage`, false, {
            description: `empty @storage`,
        });
        this.dist = Option.Boolean(`@dist`, false, {
            description: `empty @dist`,
        });
        /**
         * Set CI to true
         */
        this.dry = true;
    }
    get args() {
        return { ...this.context.args, dry: true };
    }
    async runCommand() {
        try {
            await this.app.run();
        }
        catch (e) { }
        if (this.storage || (!this.storage && !this.dist)) {
            await this.cleanStorage();
        }
        if (this.dist || (!this.storage && !this.dist)) {
            await this.cleanDist();
        }
    }
    async cleanDist() {
        try {
            await remove(this.app.path(`@dist`));
            await this.renderOnce(React.createElement(Box, null,
                React.createElement(Text, { color: "green" },
                    "\u2714 emptied ",
                    this.app.path(`@dist`))));
        }
        catch (err) {
            this.context.stderr.write(err);
        }
    }
    async cleanStorage() {
        try {
            await ensureDir(this.app.path(`@storage`));
            await remove(this.app.path(`@storage`));
            await this.renderOnce(React.createElement(Box, null,
                React.createElement(Text, { color: "green" },
                    "\u2714 emptied ",
                    this.app.path(`@storage`))));
        }
        catch (err) {
            this.context.stderr.write(err);
        }
    }
}
CleanCommand.paths = [[`clean`]];
CleanCommand.usage = Command.Usage({
    category: `tasks`,
    description: `Clean project artifacts and caches`,
    details: `
      \`bud clean\` empties the \`@dist\` and \`@storage\` directories.

      \`bud clean @dist\` empties the \`@dist\` directory.

      \`bud clean @storage\` empties the \`@storage\` directory.
`,
    examples: [
        [`Clean artifacts/caches`, `$0 clean`],
        [`Clean dist`, `$0 clean @dist`],
        [`Clean storage`, `$0 clean @storage`],
    ],
});
__decorate([
    bind
], CleanCommand.prototype, "runCommand", null);
__decorate([
    bind
], CleanCommand.prototype, "cleanDist", null);
__decorate([
    bind
], CleanCommand.prototype, "cleanStorage", null);
//# sourceMappingURL=clean.js.map