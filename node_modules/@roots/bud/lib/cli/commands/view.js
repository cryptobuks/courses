import { Command, Option } from '@roots/bud-support/clipanion';
import { highlight } from '@roots/bud-support/highlight';
import { Box, Static, Text } from '@roots/bud-support/ink';
import { get } from '@roots/bud-support/lodash-es';
import format from '@roots/bud-support/pretty-format';
import React, { Fragment } from '@roots/bud-support/react';
import BaseCommand from './base.js';
/**
 * `bud view` command
 *
 * @public
 */
export default class ViewCommand extends BaseCommand {
    constructor() {
        super(...arguments);
        this.dry = true;
        this.notify = false;
        this.color = Option.Boolean(`--color,-c`, true, {
            description: `use syntax highlighting`,
        });
        this.indent = Option.String(`--indent,-i`, `2`, {
            description: `indentation level`,
            tolerateBoolean: true,
        });
        this.subject = Option.String({ name: `subject`, required: false });
    }
    /**
     * Command execute
     *
     * @public
     */
    async runCommand() {
        await this.app.build.make();
        let value = this.subject ? get(this.app, this.subject) : this.app;
        value = format(this.subject ? get(this.app, this.subject) : this.app, {
            indent: parseInt(this.indent === undefined
                ? `2`
                : this.indent === true
                    ? `2`
                    : this.indent === false
                        ? `0`
                        : this.indent),
        });
        if (this.color)
            value = highlight(value);
        await this.renderOnce(React.createElement(Box, { marginBottom: 1 },
            React.createElement(Static, { items: [0] }, id => (React.createElement(Fragment, { key: id },
                React.createElement(Text, { color: "magenta" }, this.subject ?? `build.config`),
                React.createElement(Text, null, ` `),
                React.createElement(Text, { key: id }, value))))));
    }
}
/**
 * Command paths
 * @public
 */
ViewCommand.paths = [[`view`]];
/**
 * Command usage
 * @public
 */
ViewCommand.usage = Command.Usage({
    description: `Explore bud object`,
    examples: [
        [`view compiled config`, `$0 view`],
        [`view`, `$0 view env store`],
    ],
});
//# sourceMappingURL=view.js.map