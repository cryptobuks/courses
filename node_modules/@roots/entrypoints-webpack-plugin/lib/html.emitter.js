import { __decorate } from "tslib";
import { bind } from 'helpful-decorators';
import Webpack from 'webpack';
/**
 * Emits inline html for each entrypoint
 *
 * @param compilation - Webpack compilation instance
 * @param publicPath - public path for assets
 */
export class HtmlEmitter {
    /**
     * Class constructor
     *
     * @param compilation - webpack compilation
     * @param publicPath - asset publicPath
     *
     * @public
     */
    constructor(compilation, assets, publicPath) {
        this.compilation = compilation;
        this.assets = assets;
        this.publicPath = publicPath;
    }
    /**
     * Get compiled asset file contents
     *
     * @param file - asset file
     * @returns - asset file contents
     *
     * @public
     * @decorator `@bind`
     */
    getCompiledAsset(file) {
        const raw = this.compilation.assets[file.replace(this.publicPath, ``)]?.source();
        return raw instanceof Buffer ? raw.toString() : raw;
    }
    /**
     * Reduce an entrypoint entry to markup
     *
     * @public
     * @decorator `@bind`
     */
    entrypointsReducer(acc, [type, files]) {
        if ([`js`, `mjs`].includes(type))
            return files.reduce(this.scriptReducer, acc);
        if (type === `css`)
            return files.reduce(this.styleReducer, acc);
        return acc;
    }
    /**
     * Reduce a stylesheet from entry item to markup
     *
     * @public
     * @decorator `@bind`
     */
    styleReducer(acc, file) {
        return [acc, `<link rel="stylesheet" href="${file}" />`].join(`\n`);
    }
    /**
     * Reduce a script from entry item to markup
     *
     * @public
     * @decorator `@bind`
     */
    scriptReducer(acc, src) {
        const attributes = {
            type: src.endsWith(`.mjs`) ? `module` : false,
            src: !src.includes(`runtime`) ? src : false,
            defer: true,
            async: true,
        };
        return [
            acc,
            this.makeScript(attributes, src.includes(`runtime`) ? this.getCompiledAsset(src) : null),
        ].join(`\n`);
    }
    /**
     * Reduce a js filename to markup
     *
     * @public
     * @decorator `@bind`
     */
    makeScript(attributes, inner = ``) {
        inner = inner ? `\n\t${inner}\n` : ``;
        const stringyAttributes = attributes
            ? Object.entries(attributes)
                .filter(([, v]) => typeof v !== `undefined` && v !== false)
                .map(([k, v]) => (v === true ? k : `${k}="${v}"`))
                .reduce((acc, v) => [...acc, v], [])
                .filter(Boolean)
                .join(` `)
            : ``;
        return `<script ${stringyAttributes}>${inner}</script>`;
    }
    /**
     * Reduce entrypoint assets to markup
     *
     * @public
     * @decorator `@bind`
     */
    emit() {
        Object.entries(this.assets).map(([name, asset]) => {
            Object.assign(this.compilation.assets, {
                [`${name}.html`]: new Webpack.sources.RawSource(Object.entries(asset).reduce(this.entrypointsReducer, ``)),
            });
        });
    }
}
__decorate([
    bind
], HtmlEmitter.prototype, "getCompiledAsset", null);
__decorate([
    bind
], HtmlEmitter.prototype, "entrypointsReducer", null);
__decorate([
    bind
], HtmlEmitter.prototype, "styleReducer", null);
__decorate([
    bind
], HtmlEmitter.prototype, "scriptReducer", null);
__decorate([
    bind
], HtmlEmitter.prototype, "makeScript", null);
__decorate([
    bind
], HtmlEmitter.prototype, "emit", null);
//# sourceMappingURL=html.emitter.js.map