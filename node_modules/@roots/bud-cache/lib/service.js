import { __decorate } from "tslib";
import { Service } from '@roots/bud-framework/service';
import { bind } from '@roots/bud-support/decorators';
import * as fs from '@roots/bud-support/fs';
import { isUndefined } from '@roots/bud-support/lodash-es';
import { createHash } from 'node:crypto';
import InvalidateCacheExtension from './invalidate-cache-extension/index.js';
/**
 * Cache service class
 *
 * @public
 */
export default class Cache extends Service {
    constructor() {
        super(...arguments);
        /**
         * Enabled
         *
         * @public
         */
        this.enabled = true;
    }
    /**
     * Type
     *
     * @public
     */
    get name() {
        return this.app.hooks.filter(`build.cache.name`);
    }
    set name(name) {
        this.app.hooks.on(`build.cache.name`, name);
    }
    /**
     * Type
     *
     * @public
     */
    get type() {
        return this.app.hooks.filter(`build.cache.type`);
    }
    set type(type) {
        this.app.hooks.on(`build.cache.type`, type);
    }
    /**
     * version
     *
     * @public
     */
    get version() {
        return this.app.hooks.filter(`build.cache.version`);
    }
    set version(version) {
        this.app.hooks.on(`build.cache.version`, version);
    }
    /**
     * Build dependencies
     *
     * @public
     */
    get buildDependencies() {
        return {
            config: Object.values(this.app.context.config).map(({ path }) => path),
        };
    }
    /**
     * Cache directory
     *
     * @public
     */
    get cacheDirectory() {
        return this.app.hooks.filter(`build.cache.cacheDirectory`);
    }
    set cacheDirectory(directory) {
        this.app.hooks.on(`build.cache.cacheDirectory`, directory);
    }
    /**
     * Webpack configuration
     *
     * @public
     */
    get configuration() {
        if (this.enabled !== true)
            return false;
        return this.type == `memory` ? this.memoryCache : this.filesystemCache;
    }
    /**
     * Memory cache
     *
     * @public
     */
    get memoryCache() {
        return true;
    }
    /**
     * Filesystem cache
     *
     * @public
     */
    get filesystemCache() {
        return {
            name: this.name,
            type: this.type,
            store: `pack`,
            allowCollectingMemory: true,
            cacheDirectory: this.cacheDirectory,
            buildDependencies: this.buildDependencies,
            idleTimeout: 10000,
            idleTimeoutForInitialStore: 0,
            profile: true,
            version: this.version,
        };
    }
    /**
     * `boot` callback
     *
     * @public
     * @decorator `@bind`
     */
    async booted() {
        await this.app.extensions.add(InvalidateCacheExtension);
        this.enabled =
            isUndefined(this.app.context.args.cache) ||
                this.app.context.args.cache !== false;
        switch (this.app.context.args.cache) {
            case `memory`:
                this.type = `memory`;
                break;
            case `filesystem`:
                this.type = `filesystem`;
                break;
            case undefined:
                this.type = `filesystem`;
                break;
            case false:
                this.enabled = false;
                break;
        }
        this.name = `webpack`;
        this.cacheDirectory = this.app.path(`@storage`, this.app.label, `cache`, this.app.mode);
        const args = Object.entries(this.app.context.args)
            .filter(([k, v]) => v !== undefined)
            .map(([k, v]) => `${k}-${v}`)
            .join(`.`);
        this.version = createHash(`sha1`)
            .update(this.app.json.stringify([this.app.context.config, args]))
            .digest(`base64`)
            .replace(/[^a-z0-9]/gi, `_`)
            .toLowerCase();
        this.app.success(`cache initialized`);
        if (this.app.context.args.cache === false) {
            this.app.log(`cache is disabled with a contextual argument`);
        }
    }
    async flush() {
        await fs.remove(this.cacheDirectory);
    }
}
/**
 * Service label
 *
 * @public
 */
Cache.label = `cache`;
__decorate([
    bind
], Cache.prototype, "booted", null);
__decorate([
    bind
], Cache.prototype, "flush", null);
//# sourceMappingURL=service.js.map