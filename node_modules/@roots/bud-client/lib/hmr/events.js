"use strict";
/* eslint-disable no-console */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Events = void 0;
/**
 * HMR EventSource
 *
 * @public
 */
class Events extends EventSource {
    /**
     * Class constructor
     *
     * @remarks
     * Singleton interface, so this is private.
     */
    constructor(options) {
        super(options.path);
        this.options = options;
        /**
         * Messages
         */
        this.messages = new Set();
        /**
         * Registered listeners
         * @public
         */
        this.listeners = new Set();
        /**
         * EventSource `onopen` handler
         * @public
         */
        this.onopen = function (ev) {
            return __awaiter(this, void 0, void 0, function* () {
                console.log(`[bud] connected`);
            });
        };
        /**
         * EventSource `onmessage` handler
         * @public
         */
        this.onmessage = function (payload) {
            var _a, _b, _c, _d;
            return __awaiter(this, void 0, void 0, function* () {
                // @ts-ignore
                if (!payload)
                    return;
                try {
                    this.payload = JSON.parse(payload.data);
                    ((_a = this.payload) === null || _a === void 0 ? void 0 : _a.action) === `reload` &&
                        this.options.reload &&
                        window.location.reload();
                    if ((_b = this.payload) === null || _b === void 0 ? void 0 : _b.hash) {
                        if (this.messages.has((_c = this.payload) === null || _c === void 0 ? void 0 : _c.hash))
                            return;
                        this.currentHash = (_d = this.payload) === null || _d === void 0 ? void 0 : _d.hash;
                        this.messages.add(this.currentHash);
                    }
                    if (this.messages.size <= 1)
                        return;
                    yield Promise.all([...this.listeners].map((listener) => __awaiter(this, void 0, void 0, function* () { return yield listener(payload); })));
                }
                catch (error) { }
            });
        };
        this.onopen = this.onopen.bind(this);
        this.onmessage = this.onmessage.bind(this);
        this.addMessageListener = this.addMessageListener.bind(this);
    }
    /**
     * Singleton constructor
     * @public
     */
    static make(options) {
        if (!window.bud)
            window.bud = { hmr: {} };
        if (!window.bud.hmr[options.path]) {
            window.bud.hmr[options.path] = new Events(options);
        }
        return window.bud.hmr[options.path];
    }
    /**
     * EventSource `addMessageListener` handler
     * @public
     */
    addMessageListener(callback) {
        this.listeners.add(callback);
        return this;
    }
}
exports.Events = Events;
