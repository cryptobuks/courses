import { Box, Text } from '@roots/bud-support/ink';
import Link from '@roots/bud-support/ink-link';
import { isString } from '@roots/bud-support/lodash-es';
import React from '@roots/bud-support/react';
import figures from 'figures';
import { networkInterfaces } from 'node:os';
import * as theme from './format.js';
const external = Object.values(networkInterfaces())
    .flat()
    .find(i => i?.family === `IPv4` && !i?.internal)?.address;
const formatUrl = (host, protocol, port) => `${protocol}//${host === `0.0.0.0` ? `localhost` : host}${!isString(port) || [``, `80`, `8080`].includes(port) ? `` : `:${port}`}`;
const getServer = (app) => {
    const { protocol, port, hostname: internal } = app.server?.connection?.url;
    if (!internal || !port || !protocol)
        return false;
    return {
        internal: formatUrl(internal, protocol, port),
        external: formatUrl(external, protocol, port),
    };
};
const getProxy = (app) => {
    const proxy = app.hooks.filter(`dev.middleware.proxy.target`);
    if (!proxy)
        return false;
    return formatUrl(proxy.hostname, proxy.protocol, proxy.port);
};
export const Server = ({ app, displayServerInfo, }) => {
    const server = getServer(app);
    const proxy = getProxy(app);
    return (React.createElement(Box, { flexDirection: "column" },
        React.createElement(Box, { flexDirection: "row" },
            React.createElement(Text, { color: theme.color.cyan, dimColor: !displayServerInfo },
                figures.info,
                " ",
                React.createElement(Text, { underline: true }, "s"),
                "erver")),
        displayServerInfo ? (React.createElement(React.Fragment, null,
            React.createElement(Text, { dimColor: true }, figures.lineVerticalDashed7),
            proxy && (React.createElement(Box, { flexDirection: "row" },
                React.createElement(Box, { marginRight: 1 },
                    React.createElement(Text, { dimColor: true }, "\u251C\u2500 proxying:")),
                React.createElement(Box, null,
                    React.createElement(Link, { url: proxy },
                        React.createElement(Text, null, proxy))))),
            server ? (React.createElement(Box, { flexDirection: "row" },
                React.createElement(Box, { marginRight: 1 },
                    React.createElement(Text, { dimColor: true }, "\u251C\u2500 internal:")),
                React.createElement(Box, null,
                    React.createElement(Link, { url: server.internal },
                        React.createElement(Text, null, server.internal))))) : null,
            server ? (React.createElement(Box, { flexDirection: "row" },
                React.createElement(Box, { marginRight: 1 },
                    React.createElement(Text, { dimColor: true }, "\u2514\u2500 external:")),
                React.createElement(Box, null,
                    React.createElement(Link, { url: server.external },
                        React.createElement(Text, null, server.external))))) : null,
            React.createElement(Box, { marginTop: 1, minWidth: "100%", flexDirection: "row", justifyContent: "space-between" },
                React.createElement(Text, null,
                    figures.ellipsis,
                    " watching project sources",
                    app.server.watcher?.files?.size > 0 && (React.createElement(Text, { dimColor: true },
                        ` `,
                        "(and ",
                        app.server.watcher.files.size,
                        " other",
                        ` `,
                        app.server.watcher.files.size > 1 ? `files` : `file`,
                        ")",
                        ` `))),
                React.createElement(Text, null,
                    figures.info,
                    " ",
                    React.createElement(Text, { dimColor: true }, "ctrl+c to exit"))))) : null));
};
//# sourceMappingURL=server.js.map