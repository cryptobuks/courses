import { __decorate } from "tslib";
/* eslint-disable no-console */
import { Service } from '@roots/bud-framework/service';
import { bind } from '@roots/bud-support/decorators';
/**
 * Dashboard service
 *
 * @public
 */
export class Dashboard extends Service {
    constructor() {
        super(...arguments);
        /**
         * Build progress
         *
         * @public
         */
        this.percentage = 0;
    }
    /**
     * log to stdout
     *
     * @public
     * @decorator `@bind`
     */
    log(...strings) {
        this.app.context.stdout.write(strings.join(``));
    }
    /**
     * Run dashboard
     *
     * @public
     * @decorator `@bind`
     */
    async stats({ stats: compilationStats, }) {
        if (!compilationStats)
            return this;
        if (this.app.context.args.log === false) {
            if (compilationStats.hasErrors() && this.app.isProduction)
                this.app.fatal(new Error(`compilation completed but had errors`));
            return;
        }
        if (this.app.context.args.ci) {
            this.log(compilationStats?.toString());
            if (compilationStats.hasErrors() && this.app.isProduction)
                this.app.fatal(new Error(`compilation completed but had errors`));
            return this;
        }
        try {
            const { renderDashboard } = await import(`./render/renderer.js`);
            const stats = compilationStats.toJson(`all`);
            if (!stats || stats.hash === this.lastHash)
                return this;
            this.lastHash = stats.hash;
            this.instance = renderDashboard({
                stats,
                app: this.app,
            });
            await this.instance.waitUntilExit();
        }
        catch (error) {
            this.log(compilationStats?.toString());
            throw error;
        }
        if (compilationStats.hasErrors() && this.app.isProduction)
            this.app.fatal(new Error(`compilation completed but had errors`));
        return this;
    }
}
/**
 * Service label
 *
 * @public
 */
Dashboard.label = `dashboard`;
__decorate([
    bind
], Dashboard.prototype, "log", null);
__decorate([
    bind
], Dashboard.prototype, "stats", null);
//# sourceMappingURL=service.js.map