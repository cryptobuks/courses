import { __decorate } from "tslib";
import { bind } from '@roots/bud-support/decorators';
/**
 * Node server
 *
 * @remarks
 * Base class. Extended by either `http` or `https` class.
 *
 * @public
 */
export class BaseServer {
    /**
     * Constructor
     *
     * @param app - Bud
     * @public
     */
    constructor(app) {
        this.app = app;
        this.logger = this.app.logger.instance.scope(this.constructor.name.toLowerCase());
    }
    /**
     * Options
     *
     * @public
     */
    get options() {
        return this.app.hooks.filter(`dev.options`);
    }
    /**
     * Setup
     *
     * @public
     * @decorator `@bind`
     */
    async setup() {
        this.url = this.app.hooks.filter(`dev.url`);
    }
    /**
     * Listen
     *
     * @public
     * @decorator `@bind`
     */
    async listen() {
        this.instance
            .listen({
            port: Number(this.url.port),
        })
            .on(`listening`, this.onListening)
            .on(`request`, this.onRequest)
            .on(`error`, this.onError);
    }
    /**
     * Server listen event
     *
     * @public
     * @decorator `@bind`
     */
    onListening(...param) {
        this.logger.info(`listening`, ...param);
    }
    /**
     * Server request event
     *
     * @public
     * @decorator `@bind`
     */
    async onRequest(request, response) {
        this.logger.log(`[${response.statusCode}]`, request.url, response.statusMessage ?? ``);
        return response;
    }
    /**
     * Server error event
     *
     * @public
     * @decorator `@bind`
     */
    onError(error) {
        this.app.error(error);
    }
}
__decorate([
    bind
], BaseServer.prototype, "setup", null);
__decorate([
    bind
], BaseServer.prototype, "listen", null);
__decorate([
    bind
], BaseServer.prototype, "onListening", null);
__decorate([
    bind
], BaseServer.prototype, "onRequest", null);
__decorate([
    bind
], BaseServer.prototype, "onError", null);
