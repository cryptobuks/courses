import { __decorate } from "tslib";
import { bind } from '@roots/bud-support/decorators';
import globby from '@roots/bud-support/globby';
import chokidar from 'chokidar';
/**
 * FS Watcher
 *
 * @public
 */
export class Watcher {
    /**
     * Class constructor
     *
     * @param app - Application instance
     */
    constructor(app) {
        this.app = app;
        this.logger = this.app.server.logger.scope(...this.app.logger.scope, `server`, `watch`);
    }
    /**
     * Get watch options
     *
     * @public
     * @decorator `@bind`
     */
    getOptions() {
        this.options = this.app.hooks.filter(`dev.watch.options`, {});
        return this.options;
    }
    /**
     * Get watched files
     *
     * @public
     * @decorator `@bind`
     */
    getFiles() {
        this.files = this.app.hooks.filter(`dev.watch.files`, new Set());
        if (this.files.size === 0)
            return [];
        return Array.from(this.files);
    }
    /**
     * Get files
     *
     * @public
     * @decorator `@bind`
     */
    async search() {
        return await globby(this.getFiles());
    }
    /**
     * Watcher callback
     *
     * @param path - changed file
     *
     * @public
     * @decorator `@bind`
     */
    watcherCallback(path) {
        this.logger.log(`edit to`, path.replace(this.app.path(), `.`), `triggered reload`);
        this.app.server.appliedMiddleware?.hot?.publish({
            action: `reload`,
            message: `Detected file change: ${path}. Reloading window.`,
        });
    }
    /**
     * Initialize watch files
     *
     * @public
     * @decorator `@bind`
     */
    async watch() {
        const files = await this.search();
        this.files = new Set(files);
        if (files.length < 1)
            return;
        this.instance = chokidar
            .watch(files, this.getOptions())
            .on(`change`, this.watcherCallback);
        this.logger.log(`watching ${this.files.size} files for changes`);
        return this.instance;
    }
}
__decorate([
    bind
], Watcher.prototype, "getFiles", null);
__decorate([
    bind
], Watcher.prototype, "search", null);
__decorate([
    bind
], Watcher.prototype, "watcherCallback", null);
__decorate([
    bind
], Watcher.prototype, "watch", null);
