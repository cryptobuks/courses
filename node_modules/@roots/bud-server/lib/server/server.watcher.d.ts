import type { Bud } from '@roots/bud-framework/bud';
import type { Server } from '@roots/bud-framework/services';
import chokidar from 'chokidar';
/**
 * FS Watcher
 *
 * @public
 */
export declare class Watcher implements Server.Watcher {
    app: Bud;
    /**
     * Watcher instance
     *
     * @public
     */
    instance: chokidar.FSWatcher;
    /**
     * Watch files
     *
     * @public
     */
    files: Set<string>;
    /**
     * Watch options
     *
     * @public
     */
    options: chokidar.WatchOptions;
    /**
     * Logger
     *
     * @public
     */
    logger: Bud['logger']['instance'];
    /**
     * Class constructor
     *
     * @param app - Application instance
     */
    constructor(app: Bud);
    /**
     * Get watch options
     *
     * @public
     * @decorator `@bind`
     */
    getOptions(): chokidar.WatchOptions;
    /**
     * Get watched files
     *
     * @public
     * @decorator `@bind`
     */
    getFiles(): Array<string>;
    /**
     * Get files
     *
     * @public
     * @decorator `@bind`
     */
    search(): Promise<string[]>;
    /**
     * Watcher callback
     *
     * @param path - changed file
     *
     * @public
     * @decorator `@bind`
     */
    watcherCallback(path: string): void;
    /**
     * Initialize watch files
     *
     * @public
     * @decorator `@bind`
     */
    watch(): Promise<Watcher['instance']>;
}
//# sourceMappingURL=server.watcher.d.ts.map