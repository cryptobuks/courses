import { __decorate } from "tslib";
import { bind } from '@roots/bud-support/decorators';
/**
 * Proxy request interceptor
 *
 * @public
 */
export class RequestInterceptorFactory {
    /**
     * Class constructor
     *
     * @public
     */
    constructor(_app, url) {
        this._app = _app;
        this.url = url;
    }
    /**
     * Bud instance
     *
     * @public
     */
    get app() {
        return this._app();
    }
    /**
     * Callback for `http-proxy-middleware` `onProxyReq`
     *
     * @param proxyRequest - proxy client request
     * @param request - incoming message
     * @param _response - server response
     * @returns void
     *
     * @public
     * @decorator `@bind`
     */
    async _interceptor(proxyRequest, request, _response) {
        try {
            /**
             * Acorn compat
             * Ideally, we use the headers included after this
             */
            proxyRequest.setHeader(`x-bud-dev-pathname`, new URL(request.url, `http://${request.headers.host}`).pathname);
            /**
             * Headers
             */
            proxyRequest.setHeader(`x-bud-dev-origin`, this.url.dev.origin);
            proxyRequest.setHeader(`x-bud-dev-protocol`, this.url.dev.protocol);
            proxyRequest.setHeader(`x-bud-dev-hostname`, this.url.dev.hostname);
            proxyRequest.setHeader(`x-bud-request`, new URL(request.url, `${this.url.dev.protocol ?? `http:`}//${request.headers.host}`).toJSON());
        }
        catch (err) {
            this.app.error(`${err}\n`);
        }
    }
    /**
     * Returns the onProxyReq callback
     */
    make() {
        return this._interceptor;
    }
}
__decorate([
    bind
], RequestInterceptorFactory.prototype, "_interceptor", null);
__decorate([
    bind
], RequestInterceptorFactory.prototype, "make", null);
