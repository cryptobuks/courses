/// <reference types="node" />
/// <reference types="node" />
import type { Bud } from '@roots/bud-framework';
import type * as http from 'http';
import type { ApplicationURL } from './url.js';
interface IncomingMessage extends http.IncomingMessage {
    cookies: any;
}
interface ServerResponse extends http.ServerResponse {
    cookie: any;
}
export interface ResponseInterceptorFactory {
    interceptor(buffer: Buffer, proxyResponse: IncomingMessage, request: IncomingMessage, response: ServerResponse): Promise<Buffer | string>;
}
/**
 * Proxy response interceptor
 *
 * @public
 */
export declare class ResponseInterceptorFactory {
    _app: () => Bud;
    url: ApplicationURL;
    /**
     * The bud instance
     *
     * @public
     */
    get app(): Bud;
    /**
     * Class constructor
     *
     * @public
     */
    constructor(_app: () => Bud, url: ApplicationURL);
    /**
     * Returns the `onProxyRes` callback for `http-proxy-middleware`
     *
     * @public
     * @decorator `@bind`
     */
    make(): (proxyRes: http.IncomingMessage, req: http.IncomingMessage, res: http.ServerResponse) => Promise<void>;
}
export {};
//# sourceMappingURL=res.interceptor.d.ts.map