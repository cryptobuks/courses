/// <reference types="express-serve-static-core" />
import { Service } from '@roots/bud-framework/service';
import type { Connection, Middleware, Service as BaseService } from '@roots/bud-framework/services/server';
import * as middlewareMap from '../middleware/middleware.js';
import { Watcher } from '../server/server.watcher.js';
/**
 * Server service class
 * @public
 */
export declare class Server extends Service implements BaseService {
    /**
     * Service label
     *
     * @public
     */
    static label: string;
    /**
     * Express instance
     * @public
     */
    application: Express.Application & {
        set: any;
        use: any;
    };
    /**
     * Watcher instance
     * @public
     */
    watcher: Watcher;
    /**
     * Server connections
     * @public
     */
    connection: Connection;
    /**
     * Available middleware
     * @public
     */
    availableMiddleware: typeof middlewareMap;
    /**
     * Utilized middleware
     * @public
     */
    get enabledMiddleware(): BaseService['enabledMiddleware'];
    /**
     * Applied middleware
     * @public
     */
    appliedMiddleware: Partial<Record<keyof Middleware.Available, any>>;
    /**
     * `register` callback
     *
     * @public
     * @decorator `@bind`
     * @decorator `@once`
     */
    register(): Promise<void>;
    /**
     * Set connection
     * @public
     * @decorator `@bind`
     * @decorator `@once`
     */
    setConnection(): Promise<void>;
    /**
     * Inject scripts
     * @public
     * @decorator `@bind`
     * @decorator `@once`
     */
    injectScripts(): Promise<void>;
    /**
     * Apply middleware
     * @public
     * @decorator `@bind`
     * @decorator `@once`
     */
    applyMiddleware(): Promise<void>;
    /**
     * Run development server
     * @public
     * @decorator `@bind`
     */
    run(): Promise<void>;
}
//# sourceMappingURL=service.d.ts.map