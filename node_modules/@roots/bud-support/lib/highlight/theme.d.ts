export declare const identity: (x: unknown) => unknown;
export declare const theme: {
    /**
     * keyword in a regular Algol-style language
     */
    keyword: import("chalk").ChalkInstance;
    /**
     * built-in or library object (constant, class, function)
     */
    built_in: import("chalk").ChalkInstance;
    /**
     * user-defined type in a language with first-class syntactically significant types, like
     * Haskell
     */
    type: import("chalk").ChalkInstance;
    /**
     * special identifier for a built-in value ("true", "false", "null")
     */
    literal: import("chalk").ChalkInstance;
    /**
     * number, including units and modifiers, if any.
     */
    number: import("chalk").ChalkInstance;
    /**
     * literal regular expression
     */
    regexp: import("chalk").ChalkInstance;
    /**
     * literal string, character
     */
    string: import("chalk").ChalkInstance;
    /**
     * parsed section inside a literal string
     */
    subst: (x: unknown) => unknown;
    /**
     * symbolic constant, interned string, goto label
     */
    symbol: (x: unknown) => unknown;
    /**
     * class or class-level declaration (interfaces, traits, modules, etc)
     */
    class: import("chalk").ChalkInstance;
    /**
     * function or method declaration
     */
    function: import("chalk").ChalkInstance;
    /**
     * name of a class or a function at the place of declaration
     */
    title: (x: unknown) => unknown;
    /**
     * block of function arguments (parameters) at the place of declaration
     */
    params: (x: unknown) => unknown;
    /**
     * comment
     */
    comment: import("chalk").ChalkInstance;
    /**
     * documentation markup within comments
     */
    doctag: import("chalk").ChalkInstance;
    /**
     * flags, modifiers, annotations, processing instructions, preprocessor directive, etc
     */
    meta: import("chalk").ChalkInstance;
    /**
     * keyword or built-in within meta construct
     */
    'meta-keyword': (x: unknown) => unknown;
    /**
     * string within meta construct
     */
    'meta-string': (x: unknown) => unknown;
    /**
     * heading of a section in a config file, heading in text markup
     */
    section: (x: unknown) => unknown;
    /**
     * XML/HTML tag
     */
    tag: import("chalk").ChalkInstance;
    /**
     * name of an XML tag, the first word in an s-expression
     */
    name: import("chalk").ChalkInstance;
    /**
     * s-expression name from the language standard library
     */
    'builtin-name': (x: unknown) => unknown;
    /**
     * name of an attribute with no language defined semantics (keys in JSON, setting names in
     * .ini), also sub-attribute within another highlighted object, like XML tag
     */
    attr: import("chalk").ChalkInstance;
    /**
     * name of an attribute followed by a structured value part, like CSS properties
     */
    attribute: (x: unknown) => unknown;
    /**
     * variable in a config or a template file, environment var expansion in a script
     */
    variable: (x: unknown) => unknown;
    /**
     * list item bullet in text markup
     */
    bullet: (x: unknown) => unknown;
    /**
     * code block in text markup
     */
    code: (x: unknown) => unknown;
    /**
     * emphasis in text markup
     */
    emphasis: import("chalk").ChalkInstance;
    /**
     * strong emphasis in text markup
     */
    strong: import("chalk").ChalkInstance;
    /**
     * mathematical formula in text markup
     */
    formula: (x: unknown) => unknown;
    /**
     * hyperlink in text markup
     */
    link: import("chalk").ChalkInstance;
    /**
     * quotation in text markup
     */
    quote: (x: unknown) => unknown;
    /**
     * tag selector in CSS
     */
    'selector-tag': (x: unknown) => unknown;
    /**
     * #id selector in CSS
     */
    'selector-id': (x: unknown) => unknown;
    /**
     * .class selector in CSS
     */
    'selector-class': (x: unknown) => unknown;
    /**
     * [attr] selector in CSS
     */
    'selector-attr': (x: unknown) => unknown;
    /**
     * :pseudo selector in CSS
     */
    'selector-pseudo': (x: unknown) => unknown;
    /**
     * tag of a template language
     */
    'template-tag': (x: unknown) => unknown;
    /**
     * variable in a template language
     */
    'template-variable': (x: unknown) => unknown;
    /**
     * added or changed line in a diff
     */
    addition: import("chalk").ChalkInstance;
    /**
     * deleted line in a diff
     */
    deletion: import("chalk").ChalkInstance;
    /**
     * things not matched by any token
     */
    default: (x: unknown) => unknown;
};
//# sourceMappingURL=theme.d.ts.map