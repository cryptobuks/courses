import { __decorate } from "tslib";
import { bind } from 'helpful-decorators';
import Webpack from 'webpack';
import * as wpPkgs from './packages.js';
/**
 * @public
 */
export default class WordPressDependenciesWebpackPlugin {
    /**
     * @public
     */
    constructor(options) {
        /**
         * @public
         */
        this.plugin = {
            name: `WordPressDependenciesWebpackPlugin`,
            stage: Infinity,
        };
        /**
         * @public
         */
        this.manifest = {};
        /**
         * @public
         */
        this.usedDependencies = {};
        this.fileName = options?.fileName ?? `wordpress.json`;
    }
    /**
     * @public
     */
    apply(compiler) {
        compiler.hooks.normalModuleFactory.tap(this.plugin.name, this.normalModuleFactory);
        compiler.hooks.thisCompilation.tap(this.plugin, compilation => {
            this.compilation = compilation;
            this.compilation.hooks.processAssets.tap(this.plugin, this.processAssets);
        });
    }
    /**
     * @public
     */
    normalModuleFactory(factory) {
        factory.hooks.beforeResolve.tap(this.plugin.name, ({ contextInfo, request }) => {
            const { issuer } = contextInfo;
            if (!issuer)
                return;
            this.usedDependencies = {
                ...this.usedDependencies,
                [issuer]: [
                    ...(this.usedDependencies[issuer] ?? []),
                    request,
                ].filter(wpPkgs.isProvided),
            };
            return;
        });
    }
    /**
     * @public
     */
    processAssets(assets) {
        this.compilation.entrypoints.forEach(entry => {
            this.manifest[entry.name] = [];
            for (const chunk of entry.chunks) {
                this.compilation.chunkGraph
                    .getChunkModules(chunk)
                    .forEach(({ userRequest, modules }) => {
                    this.usedDependencies[userRequest]
                        ?.map((request) => wpPkgs.transform(request).enqueue)
                        .forEach((request) => {
                        !this.manifest[entry.name].includes(request) &&
                            this.manifest[entry.name].push(request);
                    });
                    modules?.forEach(({ userRequest }) => {
                        this.usedDependencies[userRequest]
                            ?.map((request) => wpPkgs.transform(request).enqueue)
                            .forEach((request) => {
                            !this.manifest[entry.name].includes(request) &&
                                this.manifest[entry.name].push(request);
                        });
                    });
                });
            }
        });
        assets[this.fileName] = new Webpack.sources.RawSource(JSON.stringify(this.manifest), true);
    }
}
__decorate([
    bind
], WordPressDependenciesWebpackPlugin.prototype, "apply", null);
__decorate([
    bind
], WordPressDependenciesWebpackPlugin.prototype, "normalModuleFactory", null);
__decorate([
    bind
], WordPressDependenciesWebpackPlugin.prototype, "processAssets", null);
//# sourceMappingURL=plugin.js.map