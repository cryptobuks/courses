import { join } from 'lodash-es';
/**
 * Packages in the `@wordpress` namespace which
 * should not be considered as external
 */
const OMIT_PACKAGE_MATCHES = [`@wordpress/icons`, `@wordpress/interface`];
/**
 * Pkg map
 */
const packageMap = new Map([
    [
        `jquery`,
        {
            window: join([`jQuery`], `.`),
            enqueue: `jquery`,
        },
    ],
    [
        `lodash`,
        {
            window: join([`lodash`], `.`),
            enqueue: `lodash`,
        },
    ],
    [
        `react`,
        {
            window: join([`React`], `.`),
            enqueue: `react`,
        },
    ],
    [
        `react-dom`,
        {
            window: join([`ReactDOM`], `.`),
            enqueue: `react-dom`,
        },
    ],
]);
/**
 * Camelize wordpress package name
 */
const camelize = (packageName) => packageName.replace(/-(.)/g, (_m, g) => g.toUpperCase());
/**
 * Transform wordpress package name
 */
const transformPackageName = (packageName) => packageName.replace(/^@wordpress\/(.*)$/, (_m, g) => g);
/**
 * Is pkg string a wordpress window var match
 */
export const isProvided = packageName => {
    if (!packageName || OMIT_PACKAGE_MATCHES.includes(packageName))
        return false;
    return (packageName.includes(`@wordpress`) ||
        Array.from(packageMap.keys()).includes(packageName));
};
/**
 * Transform pkg string request
 */
export const transform = (packageName) => {
    const transformedPackageName = transformPackageName(packageName);
    if (packageMap.has(packageName))
        return packageMap.get(packageName);
    if (isProvided(packageName)) {
        return {
            window: [`wp`, camelize(transformedPackageName)],
            enqueue: join([`wp`, transformedPackageName], `-`),
        };
    }
};
//# sourceMappingURL=packages.js.map