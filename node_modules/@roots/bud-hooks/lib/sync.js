import { __decorate } from "tslib";
import { bind } from '@roots/bud-support/decorators';
import { isFunction } from '@roots/bud-support/lodash-es';
import Hooks from './base.js';
/**
 * Synchronous hooks registry
 *
 * @public
 */
export default class Sync extends Hooks {
    /**
     * Set a value
     *
     * @public
     * @decorator `@bind`
     */
    set(id, input) {
        if (this.has(id) && isFunction(input)) {
            this.store[id].push(this.app.value.make(input));
        }
        else {
            this.store[id] = [this.app.value.make(input)];
        }
        return this.app;
    }
    /**
     * Set multiple values
     *
     * @public
     * @decorator `@bind`
     */
    setRecords(map) {
        Object.entries(map).map(([k, v]) => this.set(k, v));
        return this.app;
    }
    /**
     * Get a value
     *
     * @public
     * @decorator `@bind`
     */
    get(id, fallback) {
        if (!this.has(id))
            return isFunction(fallback) ? fallback() : fallback;
        return (this.store[id] ?? [])
            .map(this.app.value.get)
            .reduce((accumulated, current) => isFunction(current) ? current(accumulated) : current, fallback);
    }
}
__decorate([
    bind
], Sync.prototype, "set", null);
__decorate([
    bind
], Sync.prototype, "setRecords", null);
__decorate([
    bind
], Sync.prototype, "get", null);
//# sourceMappingURL=sync.js.map