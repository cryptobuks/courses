import { cpus } from 'os';
export { bail } from './bail.js';
export { cache } from './cache.js';
export { context } from './context.js';
export { experiments } from './experiments.js';
export { infrastructureLogging } from './infrastructureLogging.js';
export { module } from './module.js';
export { optimization } from './optimization.js';
export { output } from './output.js';
export { resolve } from './resolve.js';
export const entry = async (app) => app.hooks.filter(`build.entry`);
export const externals = async (app) => app.hooks.filter(`build.externals`);
export const externalsType = async (app) => app.hooks.filter(`build.externalsType`, `var`);
export const loader = async (app) => app.hooks.filter(`build.loader`);
export const mode = async (app) => app.hooks.filter(`build.mode`, app.mode);
export const name = async (app) => app.hooks.filter(`build.name`, app.label);
export const node = async (app) => app.hooks.filter(`build.node`, false);
export const parallelism = async (app) => app.hooks.filter(`build.parallelism`, 10 * Math.max(cpus().length - 1, 1));
export const performance = async (app) => app.hooks.filter(`build.performance`, { hints: false });
export const plugins = async (app) => await app.extensions.make();
export const profile = async (app) => app.hooks.filter(`build.profile`);
export const recordsPath = async (app) => app.hooks.filter(`build.recordsPath`, app.path(`@storage`, app.label, `modules.json`));
export const stats = async (app) => app.hooks.filter(`build.stats`, { preset: `errors-only` });
export const target = async (app) => app.hooks.filter(`build.target`, app.context.manifest?.browserslist
    ? `browserslist:${app.root.path(`package.json`)}`
    : `web`);
//# sourceMappingURL=builder.js.map