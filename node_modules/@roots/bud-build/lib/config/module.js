export const module = async (app) => {
    const noParse = await getNoParse(app);
    const rules = await getRules(app);
    const unsafeCache = await getUnsafeCache(app);
    const module = { noParse, rules, unsafeCache };
    return app.hooks.filter(`build.module`, module);
};
const getRules = async (app) => {
    const rules = [];
    rules.push(...(app.hooks.filter(`build.module.rules.before`) ?? []));
    rules.push({
        oneOf: app.hooks.filter(`build.module.rules.oneOf`, Object.values(app.build.rules).map(rule => rule.toWebpack())),
    });
    rules.push(...(app.hooks.filter(`build.module.rules.after`) ?? []));
    return rules;
};
const getNoParse = async (app) => app.hooks.filter(`build.module.noParse`, undefined);
const getUnsafeCache = async (app) => app.hooks.filter(`build.module.unsafeCache`, undefined);
//# sourceMappingURL=module.js.map