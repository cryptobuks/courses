import * as Service from '@roots/bud-framework/service';
import type * as Base from '@roots/bud-framework/services/build';
import type { Items, Loaders, Rules } from '@roots/bud-framework/src/types/services/build/registry.js';
import type { Configuration } from 'webpack';
import Item from './item/item.js';
import Loader from './loader/loader.js';
import * as Rule from './rule/rule.js';
/**
 * Webpack configuration builder class
 *
 * @public
 */
export default class Build extends Service.Base implements Base.Service {
    /**
     * @public
     */
    static label: string;
    /**
     * @public
     */
    config: Partial<Configuration>;
    /**
     * Registered loaders
     *
     * @public
     */
    loaders: Record<`${keyof Loaders & string}`, Loader>;
    /**
     * Registered rules
     *
     * @public
     */
    rules: Record<`${keyof Rules & string}`, Rule.Interface>;
    /**
     * Registered items
     *
     * @public
     */
    items: Record<`${keyof Items & string}`, Item>;
    /**
     * Make webpack configuration
     *
     * @public
     * @decorator `@bind`
     */
    make(): Promise<Configuration>;
    /**
     * Service register event
     *
     * @remarks
     * `loaders`, `items`, and `rules` are instantiated dumbly
     * because it is painful to think about how to map the typings..
     *
     * @public
     * @decorator `@bind`
     */
    register(): Promise<void>;
    /**
     * Set Rule
     *
     * @param name - Rule key
     * @param options - Rule constructor properties
     * @returns the Rule
     *
     * @public
     * @decorator `@bind`
     */
    setRule<K extends `${keyof Rules & string}`>(name: K, options?: Rule.Options | Rule.Interface): this;
    /**
     * Make Rule
     *
     * @param options - rule constructor properties
     * @returns the rule
     *
     * @public
     * @decorator `@bind`
     */
    makeRule(options?: Rule.Options): Rule.Interface;
    getLoader(name: string): Loader;
    /**
     * Set Loader
     *
     * @param name - Loader key
     * @param definition - Loader constructor properties
     * @returns the Loader
     *
     * @public
     * @decorator `@bind`
     */
    setLoader<K extends `${keyof Loaders & string}`>(name: K, definition?: string | Loader): this;
    /**
     * Make Loader
     *
     * @param options - rule constructor properties
     * @returns the rule
     *
     * @public
     * @decorator `@bind`
     */
    makeLoader(src: string): Loader;
    getItem(name: `${keyof Items & string}`): Item;
    /**
     * Set Item
     *
     * @param name - Item key
     * @param options - Item constructor properties
     * @returns the Item
     *
     * @public
     * @decorator `@bind`
     */
    setItem<K extends `${keyof Items & string}`>(name: K, options?: Item | ((item: Item) => Item)): this;
    /**
     * Make Item
     *
     * @param options - rule constructor properties
     * @returns the rule
     *
     * @public
     * @decorator `@bind`
     */
    makeItem(options?: Partial<Item['options']>): Item;
}
//# sourceMappingURL=service.d.ts.map