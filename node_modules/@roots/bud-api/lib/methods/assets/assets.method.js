import { relative } from 'path';
export const assets = async function assets(request, overrides = {}) {
    /**
     * tsc will complain about `this` context being lost
     * when destructuring bud even though the context of
     * this function will be bound.
     */
    const app = this;
    const makePatternObjectFromString = fromStringFactory(app, overrides);
    const makePatternObjectFromTuple = fromTupleFactory(app, overrides);
    const arrayedRequest = !Array.isArray(request) ? [request] : request;
    const valueMapper = (item) => {
        if (typeof item === `string`) {
            const copyPluginStringPattern = item;
            return makePatternObjectFromString(copyPluginStringPattern);
        }
        if (Array.isArray(item)) {
            const tuple = item;
            return makePatternObjectFromTuple(tuple);
        }
        return { ...item, ...overrides };
    };
    app.extensions.get(`copy-webpack-plugin`).setOptions(options => ({
        ...(options ?? {}),
        patterns: [
            ...(options?.patterns ?? []),
            ...arrayedRequest.map(valueMapper),
        ],
    }));
    return app;
};
/**
 * Take an input string and return a {@link CopyPlugin.ObjectPattern}
 *
 * @internal
 */
export const fromStringFactory = (app, overrides) => (from) => ({
    from: from.startsWith(`/`) ? from : app.path(`@src`, from),
    to: from.startsWith(`/`)
        ? relative(app.path(`@src`), from)
        : app.path(`@dist`, from, `@file`),
    context: app.path(`@src`),
    noErrorOnMissing: true,
    toType: `template`,
    ...overrides,
});
/**
 * Take an input [from,to] tuple and return a {@link CopyPlugin.ObjectPattern}
 *
 * @internal
 */
export const fromTupleFactory = (app, overrides) => ([from, to]) => ({
    from: from.startsWith(`/`) ? from : app.path(`@src`, from),
    to: to.startsWith(`/`) ? to : app.path(`@dist`, to, `@file`),
    context: app.path(`@src`),
    noErrorOnMissing: true,
    toType: `template`,
    ...overrides,
});
//# sourceMappingURL=assets.method.js.map