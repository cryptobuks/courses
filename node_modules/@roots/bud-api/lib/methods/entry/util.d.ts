import type { Bud, Config } from '@roots/bud-framework';
export declare type EntryObject = Config.EntryObject;
export declare type Input = [string] | [Array<string>] | [string, string | Array<string>] | [Record<string, string | Array<string>>] | [Record<string, Config.EntryObject>];
export declare type RawValue = string | Array<string> | {
    import: string | Array<string>;
};
export declare type NormalValue = {
    import: Array<string>;
} & Config.EntryObject;
export interface method {
    (...entrypoint: Input): Promise<Bud>;
}
export interface facade {
    (...entrypoint: Input): Bud;
}
/**
 * @public
 */
export declare const isGlobular: (str: string) => boolean;
/**
 * @public
 */
export declare const reduceEntry: (a: any, [k, v]: [any, any]) => any;
/**
 * @public
 */
export declare const makeEntry: (k: string, v: RawValue) => {
    [x: string]: NormalValue;
};
/**
 * @public
 */
export declare const applyToImports: (value: Record<string, NormalValue>, fn: (request: string) => Promise<string | Array<string>>) => Promise<Array<[string, NormalValue]>>;
//# sourceMappingURL=util.d.ts.map