import { isArray, isString } from '@roots/bud-support/lodash-es';
/**
 * @internal
 */
const makeArray = v => isString(v) ? [v] : v;
/**
 * @internal
 */
const normalEntry = (entry) => {
    return isString(entry) || isArray(entry)
        ? { import: makeArray(entry) }
        : { ...(entry ?? {}), import: makeArray(entry.import) };
};
/**
 * @public
 */
export const isGlobular = (str) => [`*`, `{`, `}`, `,`].filter(c => str.includes(c))?.length > 0;
/**
 * @public
 */
export const reduceEntry = (a, [k, v]) => ({ ...a, [k]: normalEntry(v) });
/**
 * @public
 */
export const makeEntry = (k, v) => ({
    [k]: normalEntry(v),
});
/**
 * @public
 */
export const applyToImports = async (value, fn) => await Promise.all(Object.entries(value).map(async ([k, v]) => {
    v.import = (await Promise.all(v.import.map(fn))).flat();
    return [k, v];
}));
//# sourceMappingURL=util.js.map