import { isArray, isString, isUndefined } from '@roots/bud-support/lodash-es';
import { globAssets } from './entry.glob.js';
import { applyToImports, isGlobular, makeEntry, reduceEntry, } from './util.js';
export const entry = async function (...input) {
    const app = this;
    if (isUndefined(input[0])) {
        throw new Error(`bud.entry requires at least one argument`);
    }
    if (input.length > 1 && !isString(input[0])) {
        throw new Error(`the first parameter in a multi-parameter call to bud.entry must be a string`);
    }
    if ((input.length == 1 && isString(input[0])) || isArray(input[0])) {
        input = [app.label, Array.isArray(input[0]) ? input[0] : [input[0]]];
    }
    const normal = isString(input[0])
        ? makeEntry(input[0], input[1])
        : Object.entries(input[0]).reduce(reduceEntry, {});
    const records = await applyToImports(normal, async (request) => isGlobular(request) ? await globAssets.bind(this)(request) : request);
    app.hooks.on(`build.entry`, a => records.reduce((a, [k, v]) => ({ ...a, [k]: v }), a));
    return app;
};
//# sourceMappingURL=entry.method.js.map