/// <reference types="node" />
import type { Bud } from '@roots/bud-framework';
import type Https from 'node:https';
import type Http from 'node:https';
/**
 * Specification object
 *
 * @public
 */
export interface Specification {
    /**
     * A preferred port or anArray of preferred ports to use.
     * @public
     */
    port?: number | Array<number>;
    /**
     * Use ssl connection
     * @public
     */
    ssl?: boolean;
    /**
     * Ports that should not be returned.
     * @public
     */
    exclude?: number | Array<number>;
    /**
     * Hostname
     * @public
     */
    host?: string;
    /**
     * SSL certificate (path)
     * @public
     */
    cert?: string;
    /**
     * SSL key (path)
     * @public
     */
    key?: string;
    /**
     * http & https server options
     * @public
     */
    options?: Https.ServerOptions | Http.ServerOptions;
}
/**
 * Permissable options
 * @public
 */
export declare type Options = Specification | number | Array<number> | URL | string;
/**
 * bud.serve
 * @public
 */
export interface Serve<ReturnType = Promise<Bud>> {
    (options: Specification): ReturnType;
}
export interface Serve<ReturnType = Promise<Bud>> {
    (options: URL): ReturnType;
}
export interface Serve<ReturnType = Promise<Bud>> {
    (options: string): ReturnType;
}
export interface Serve<ReturnType = Promise<Bud>> {
    (options: number): ReturnType;
}
export interface Serve<ReturnType = Promise<Bud>> {
    (options: Array<number>): ReturnType;
}
/**
 * bud.serve sync facade
 * @public
 */
export declare type facade = Serve<Bud>;
/**
 * bud.serve
 * @public
 */
export declare const method: Serve;
//# sourceMappingURL=serve.method.d.ts.map