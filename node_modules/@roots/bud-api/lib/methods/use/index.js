import { isArray, isFunction } from '@roots/bud-support/lodash-es';
import { generateName, isPlugin } from './use.utilities.js';
export const use = async function (source) {
    const bud = this;
    const addExtension = async (source) => {
        if (!source) {
            bud.error(`extension source is not defined`);
        }
        let instance;
        if (isFunction(source)) {
            instance = new source(bud);
        }
        else
            instance = source;
        if (!instance.label) {
            instance.label = generateName(instance);
        }
        if (bud.extensions.has(instance.label)) {
            bud.info(`extension "${instance.label}" is already registered. skipping`);
            return bud;
        }
        if (isPlugin(instance))
            instance.make = () => instance;
        await bud.extensions.add(instance);
    };
    !isArray(source)
        ? await addExtension(source)
        : await Promise.all(source.map(addExtension));
    return bud;
};
//# sourceMappingURL=index.js.map