import { Extension } from '@roots/bud-framework/extension';
import type { Config, ThemeConfig } from 'tailwindcss/types/config';
declare type ResolvedConfig = Partial<{
    [K in keyof Config['theme'] as `${K & string}`]: ReturnType<Config['theme'][K]>;
}>;
/**
 * TailwindCSS support for `@roots/bud`
 *
 * @public
 * @decorator `@label`
 * @decorator `@dependsOn`
 */
export default class BudTailwindCss extends Extension {
    /**
     * Get config module
     * @public
     */
    get config(): {
        name: string;
        path: string;
        bud: boolean;
        local: boolean;
        dynamic: boolean;
        extension: string;
        type: "production" | "development" | "base";
        module: any;
    } | {
        module: Config;
    };
    /**
     * Resolved tailwind config
     *
     * @remarks
     * ðŸš¨ Any mutations to this object will be applied to the generated tailwindcss!
     *
     * @public
     */
    get theme(): ResolvedConfig;
    /**
     * Resolved paths
     * @public
     */
    dependencies: {
        tailwindcss: string;
        nesting: string;
    };
    /**
     * Keys that can be imported from `@tailwind` alias
     *
     * @public
     */
    get importableKeys(): Array<string>;
    /**
     * Resolve a tailwind config value
     * @public
     */
    resolveThemeValue<K extends `${keyof ThemeConfig & string}`>(key: K, extendedOnly?: boolean): Config[K];
    /**
     * Generate a static module for a tailwind theme key
     * @param key - a tailwind confg key
     * @returns
     */
    makeStaticModule(key: keyof Config['theme']): string;
    generateImports(imports?: Array<`${keyof Config['theme'] & string}`> | boolean): Promise<this>;
    /**
     * `init` callback
     *
     * @public
     */
    init(): Promise<void>;
    /**
     * `configAfter` callback
     *
     * @public
     * @decorator `@bind`
     */
    configAfter(): Promise<void>;
}
export {};
//# sourceMappingURL=extension.d.ts.map