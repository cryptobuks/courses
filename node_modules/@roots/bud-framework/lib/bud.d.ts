import type { Logger } from './logger';
import type * as methods from './methods/index.js';
import type { Module } from './module';
import * as parsers from './parsers/index.js';
import type * as Api from './services/api.js';
import type * as Options from './types/options';
import type * as Services from './types/services';
import Value from './value.js';
/**
 * Framework abstract
 *
 * @public
 */
export declare class Bud {
    /**
     * Context
     *
     * @public
     */
    context: Options.Context;
    /**
     * Implementation
     *
     * @public
     */
    implementation: Constructor;
    /**
     * Compilation mode
     *
     * @remarks
     * Either `production` or `development`.
     *
     * @readonly
     * @defaultValue `production`
     * @public
     */
    get mode(): `development` | `production`;
    /**
     * Name
     *
     * @readonly
     * @public
     */
    get label(): string;
    /**
     * Parent {@link Bud} instance
     *
     * @readonly
     * @public
     */
    get root(): Bud;
    /**
     * True when {@link Bud.mode} is `production`
     *
     * @public
     */
    get isProduction(): boolean;
    /**
     * True when {@link Bud.mode} is `development`
     *
     * @public
     */
    get isDevelopment(): boolean;
    /**
     * True when current instance is the parent instance
     *
     * @readonly
     * @public
     */
    get isRoot(): boolean;
    /**
     * True when current instance is a child instance
     *
     * @readonly
     * @public
     */
    get isChild(): boolean;
    /**
     * {@link Bud} instances
     *
     * @public
     */
    children: Record<string, Bud>;
    /**
     * True when child compilers
     *
     * @readonly
     * @public
     */
    get hasChildren(): boolean;
    services: Array<string>;
    api: Api.Service;
    build: Services.Build.Service;
    cache: Services.Cache.Service;
    compiler: Services.Compiler.Service;
    dashboard: Services.Dashboard.Service;
    env: Services.Env.Service;
    extensions: Services.Extensions.Service;
    hooks: Services.Hooks.Service;
    project: Services.Project.Service;
    logger: Logger;
    module: Module;
    server: Services.Server.Service;
    maybeCall: methods.maybeCall;
    close: methods.close;
    container: methods.container;
    get: methods.get;
    glob: methods.glob;
    globSync: methods.globSync;
    path: methods.path;
    pipe: methods.pipe;
    publicPath: methods.publicPath;
    relPath: methods.relPath;
    run: methods.run;
    setPath: methods.setPath;
    setPublicPath: methods.setPublicPath;
    sequence: methods.sequence;
    sequenceSync: methods.sequenceSync;
    sh: methods.sh;
    tap: methods.tap;
    tapAsync: methods.tapAsync;
    when: methods.when;
    bindMethod: methods.bindMethod;
    json: typeof parsers.json5;
    yml: typeof parsers.yml;
    value: typeof Value;
    /**
     * Creates a child with `bud.create` but returns the parent instance
     *
     * @public
     */
    make(request: Options.Overrides | string, tap?: (app: Bud) => Promise<unknown>): Promise<void | Bud>;
    lifecycle(context: Options.Context): Promise<Bud>;
    private formatLogMessages;
    /**
     * Log a message
     *
     * @public
     * @decorator `@bind`
     */
    log(...messages: any[]): this;
    /**
     * Log an `info` level message
     *
     * @public
     * @decorator `@bind`
     */
    info(...messages: any[]): this;
    /**
     * Log a `success` level message
     *
     * @public
     * @decorator `@bind`
     */
    success(...messages: any[]): this;
    /**
     * Log a `warning` level message
     *
     * @public
     * @decorator `@bind`
     */
    warn(...messages: any[]): this;
    /**
     * Log an error.
     *
     * @remarks
     * In `production` this error is treated as fatal
     * and will kill the process.
     *
     * @public
     * @decorator `@bind`
     */
    error(...messages: Array<any>): Bud;
    /**
     * Log and display an error.
     *
     * @remarks
     * This will always kill the process
     *
     * @public
     * @decorator `@bind`
     * @throws fatal error
     */
    fatal(error: Error): void;
}
/**
 * Bud Constructor
 */
export declare type Constructor = new () => Bud;
//# sourceMappingURL=bud.d.ts.map