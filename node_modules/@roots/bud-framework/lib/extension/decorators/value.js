import { isFunction, upperFirst } from '@roots/bud-support/lodash-es';
export const value = (prop, value) => (constructor) => {
    const applicative = {
        [`_${prop}`]: value ?? null,
        [`get${upperFirst(prop)}`]: function () {
            return this[value];
        },
        [`set${upperFirst(prop)}`]: function (value) {
            this[value] = value;
            return this;
        },
    };
    return class extends constructor {
        constructor(...args) {
            super(...args);
            Object.assign(this, Object.entries(applicative).reduce((a, [k, v]) => ({
                ...a,
                [k]: isFunction(v) ? v.bind(this) : v,
            }), {}));
            Object.defineProperty(this, prop, {
                get: (() => function () {
                    return isFunction(this[`_${prop}`])
                        ? this[`_${prop}`](this.app)
                        : this[`_${prop}`];
                }.bind(this))(),
                set: (() => function (value) {
                    this[`_${prop}`] = value;
                }.bind(this))(),
            });
        }
    };
};
//# sourceMappingURL=value.js.map