import Container from '@roots/container/container';
import type { Bud } from '../bud';
import * as BaseService from '../service.js';
export declare abstract class Service extends BaseService.Service {
    abstract bootstrap(): Promise<void>;
    abstract registered(): Promise<void>;
    /**
     * @public
     */
    abstract processQueue(): Promise<void>;
    /**
     * @public
     */
    abstract call(name: string, ...args: any): Promise<void>;
    /**
     * @public
     */
    abstract bindFacade(key: string, fn: CallableFunction): void;
    /**
     * Queued method calls
     *
     * @public
     */
    queue: Array<[string, ...any[]]>;
    /**
     * Trace of all method calls
     *
     * @public
     */
    trace: Array<[string, ...any[]]>;
    /**
     * Registered methods
     *
     * @public
     */
    data: Container;
    /**
     * Does method exist
     *
     * @public
     */
    has: Container['has'];
    /**
     * Get registered method
     *
     * @public
     */
    get: Container['get'];
    /**
     * Set registered method
     *
     * @public
     */
    set: Container['set'];
    /**
     * Is string
     *
     * @public
     */
    isString: Container['isString'];
    /**
     * Class constructor
     *
     * @public
     */
    constructor(app: Bud);
}
//# sourceMappingURL=api.d.ts.map