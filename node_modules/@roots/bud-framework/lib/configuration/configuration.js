import { __decorate } from "tslib";
import { bind } from '@roots/bud-support/decorators';
import { isFunction } from '@roots/bud-support/lodash-es';
/**
 * User config parser
 *
 * @public
 */
class Configuration {
    /**
     * Class constructor
     *
     * @public
     */
    constructor(app) {
        this.app = app;
    }
    /**
     * Process configuration
     *
     * @public
     * @decorator `@bind`
     */
    async run(description) {
        this.app
            .log(`processing configuration`, description.name)
            .info(description);
        if (description.dynamic) {
            const callback = description.module?.default ?? description.module;
            return await callback(this.app);
        }
        else {
            return await this.processStaticConfiguration(description);
        }
    }
    /**
     * Process static configuration
     *
     * @public
     * @decorator `@bind`
     */
    async processStaticConfiguration(description) {
        this.app.info(`${description.name} is being processed as a static config`);
        return await Promise.all(Object.entries(description.module).map(async ([key, value]) => {
            const request = this.app[key];
            if (isFunction(request))
                await request(value);
        }));
    }
}
__decorate([
    bind
], Configuration.prototype, "run", null);
__decorate([
    bind
], Configuration.prototype, "processStaticConfiguration", null);
export default Configuration;
//# sourceMappingURL=configuration.js.map