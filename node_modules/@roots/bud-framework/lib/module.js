import { __decorate } from "tslib";
import { bind, memo } from '@roots/bud-support/decorators';
import { resolve } from 'import-meta-resolve';
import { createRequire } from 'module';
import { join, normalize, relative } from 'node:path';
import { fileURLToPath, pathToFileURL } from 'url';
/**
 * Module resolver
 *
 * @public
 */
export class Module {
    /**
     * Class constructor
     *
     * @public
     */
    constructor(app) {
        this.app = app;
        this.require = createRequire(this.makeContextURL(this.app.root.context.basedir));
        this.logger = this.app.logger.instance.scope(...this.app.logger.scope, `module`);
    }
    /**
     * Get `package.json` absolute path from a module signifier
     *
     * @public
     * @decorator `@bind`
     */
    async getDirectory(signifier, parent) {
        try {
            return await this.resolve(signifier, parent)
                .then(path => relative(parent ?? this.app.root.context.basedir, path))
                .then(path => path.split(signifier).shift())
                .then(path => this.app.root.path(path, signifier));
        }
        catch (error) {
            throw error;
        }
    }
    /**
     * Get `package.json` absolute path from a module signifier
     *
     * @public
     * @decorator `@bind`
     */
    async getManifestPath(pkgName) {
        return await this.getDirectory(pkgName).then(dir => join(dir, `package.json`));
    }
    /**
     * Read `package.json` manifest from a module signifier
     *
     * @public
     * @decorator `@bind`
     */
    async readManifest(signifier) {
        return await this.getManifestPath(signifier).then(async (path) => {
            this.logger.log(signifier, `manifest resolved to`, path);
            return await this.app.json.read(path);
        });
    }
    /**
     * Resolve a module path from its signifier
     *
     * @public
     * @decorator `@bind`
     */
    async resolve(signifier, context) {
        try {
            const resolvedPath = await resolve(signifier, this.makeContextURL(context));
            this.logger.success(`resolved`, signifier, `to`, resolvedPath);
            return normalize(fileURLToPath(resolvedPath));
        }
        catch (err) {
            this.logger.info(signifier, `not resolvable`, `(context: ${context})`);
        }
    }
    /**
     * Import a module from its signifier
     *
     * @public
     * @decorator `@bind`
     */
    async import(signifier, context) {
        try {
            const modulePath = await this.resolve(signifier, context);
            const result = await import(modulePath);
            this.logger.success(`imported`, signifier, `from`, modulePath);
            return result?.default ?? result;
        }
        catch (err) {
            this.logger.fatal(new Error(`Fatal error importing ${signifier}\n${err}`));
            throw err;
        }
    }
    /**
     * Import a module from its signifier
     *
     * @public
     * @decorator `@bind`
     */
    async tryImport(signifier, context) {
        try {
            const modulePath = await this.resolve(signifier, context);
            const result = await import(modulePath);
            this.logger.success(`imported`, signifier, `from`, modulePath);
            return result?.default ?? result;
        }
        catch (err) {
            this.logger.info(`Error importing`, signifier, err);
        }
    }
    /**
     * Make context URL
     *
     * @param context  - context directory
     * @returns
     */
    makeContextURL(context) {
        context = context ?? this.app.root.path(`package.json`);
        return context instanceof URL ? context : pathToFileURL(context);
    }
}
__decorate([
    bind,
    memo()
], Module.prototype, "getDirectory", null);
__decorate([
    bind,
    memo()
], Module.prototype, "getManifestPath", null);
__decorate([
    bind,
    memo()
], Module.prototype, "readManifest", null);
__decorate([
    bind,
    memo()
], Module.prototype, "resolve", null);
__decorate([
    bind,
    memo()
], Module.prototype, "import", null);
__decorate([
    bind,
    memo()
], Module.prototype, "tryImport", null);
__decorate([
    bind
], Module.prototype, "makeContextURL", null);
//# sourceMappingURL=module.js.map