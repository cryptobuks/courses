import { __decorate } from "tslib";
import { bind } from '@roots/bud-support/decorators';
import { isEqual } from '@roots/bud-support/lodash-es';
import Signale from 'signale';
import { configDefaults, types } from './logger.constants.js';
/**
 * Logger service
 *
 * @public
 */
export class Logger {
    /**
     * Class constructor
     *
     * @public
     */
    constructor(_app) {
        this._app = () => _app;
        this.scope = [
            `${this.app.context.bud.label}@${this.app.context.bud.version}`,
            this.app.label,
        ];
        this.instance = this.makeInstance();
    }
    get app() {
        return this._app();
    }
    get level() {
        switch (this.app.context.args.level?.length) {
            case 1:
                return "error" /* LEVEL[`v`] */;
            case 2:
                return "warn" /* LEVEL[`vv`] */;
            case 3:
                return "debug" /* LEVEL[`vvv`] */;
            case 4:
                return "info" /* LEVEL[`vvvv`] */;
            default:
            // fallthrough
        }
        if (this.app.context.args.log === true) {
            return "debug" /* LEVEL[`vvv`] */;
        }
        return "warn" /* LEVEL[`vv`] */;
    }
    makeInstance(constructorOverrides = {}, configOverrides = {}) {
        let instance = new Signale.Signale({
            logLevel: this.level,
            disabled: isEqual(this.app.context.args.log, false),
            scope: this.app.label ?? this.app.context.bud.label,
            stream: this.app.context.stdout,
            types,
            ...constructorOverrides,
        });
        instance.config({
            ...configDefaults,
            ...configOverrides,
        });
        return instance.scope(...this.scope);
    }
}
__decorate([
    bind
], Logger.prototype, "makeInstance", null);
//# sourceMappingURL=index.js.map