import { __decorate } from "tslib";
import { bind } from '@roots/bud-framework/extension/decorators';
import { isUndefined } from '@roots/bud-support/lodash-es';
/**
 * Babel configuration
 *
 * @remarks
 * Configures plugins and presets for the Babel transpiler.
 *
 * @example
 * ```ts
 * bud.babel.setPreset(
 *   '@babel/preset-env',
 *   (await bud.babel.resolve('@babel/preset-env')),
 * )
 * ```
 *
 * @public
 */
export class Config {
    constructor() {
        /**
         * Plugins registry
         *
         * @public
         */
        this.plugins = {};
        /**
         * Presets registry
         *
         * @public
         */
        this.presets = {};
    }
    /**
     * Set a babel preset
     *
     * @param name - babel preset name
     * @param preset - path to the babel preset or the preset itself
     * @returns The babel configuration class
     *
     * @public
     * @decorator `@bind`
     */
    setPreset(name, preset) {
        if (!preset) {
            this.presets[name] = [name];
            return this;
        }
        this.presets[name] = Array.isArray(preset) ? preset : [preset];
        return this;
    }
    /**
     * Set babel presets
     *
     * @remarks
     * Completely overrides existing registry
     *
     * @public
     * @decorator `@bind`
     */
    setPresets(presets) {
        this.presets = Object.entries(presets).reduce((presets, [name, preset]) => {
            if (Array.isArray(preset)) {
                presets[name] = preset;
                return presets;
            }
            presets[name] = [preset];
            return presets;
        }, {});
        return this;
    }
    /**
     * Remove a babel preset
     *
     * @param preset - preset name
     * @returns The babel configuration class
     *
     * @public
     * @decorator `@bind`
     */
    unsetPreset(preset) {
        if (!isUndefined(this.presets[preset]))
            this.presets[preset] = undefined;
        return this;
    }
    /**
     * Set options on a babel preset
     *
     * @param preset - preset name
     * @param options - preset options
     * @returns The babel configuration class
     *
     * @public
     * @decorator `@bind`
     */
    setPresetOptions(preset, options) {
        this.presets[preset] = [this.presets[preset].shift(), options];
        return this;
    }
    /**
     * Set a babel plugin
     *
     * @param name - babel plugin name
     * @param plugin - path to the babel plugin or the plugin itself
     * @returns The babel configuration class
     *
     * @public
     * @decorator `@bind`
     */
    setPlugin(name, plugin) {
        if (!plugin && Array.isArray(name)) {
            this.plugins[name[0]] = name;
            return this;
        }
        if (!plugin && !Array.isArray(name)) {
            this.plugins[name] = [name];
            return this;
        }
        if (Array.isArray(name)) {
            throw Error(`Babel plugin name must be a string.`);
        }
        this.plugins[name] = Array.isArray(plugin) ? plugin : [plugin];
        return this;
    }
    /**
     * Set babel presets
     *
     * @remarks
     * Completely overrides existingplugins  registry
     *
     * @public
     * @decorator `@bind`
     */
    setPlugins(plugins) {
        this.plugins = Object.entries(plugins).reduce((plugins, [name, plugin]) => {
            if (Array.isArray(plugin)) {
                plugins[name] = plugin;
                return plugins;
            }
            plugins[name] = [plugin];
            return plugins;
        }, {});
        return this;
    }
    /**
     * Remove a babel plugin
     *
     * @param plugin - plugin name
     * @returns The babel configuration class
     *
     * @public
     * @decorator `@bind`
     */
    unsetPlugin(plugin) {
        if (!isUndefined(this.plugins[plugin]))
            this.plugins[plugin] = undefined;
        return this;
    }
    /**
     * Set options on a babel plugin
     *
     * @param plugin - plugin name
     * @param options - plugin options
     * @returns The babel configuration class
     *
     * @public
     * @decorator `@bind`
     */
    setPluginOptions(plugin, options) {
        this.plugins[plugin] = [this.plugins[plugin].shift(), options];
        return this;
    }
}
__decorate([
    bind
], Config.prototype, "setPreset", null);
__decorate([
    bind
], Config.prototype, "setPresets", null);
__decorate([
    bind
], Config.prototype, "unsetPreset", null);
__decorate([
    bind
], Config.prototype, "setPresetOptions", null);
__decorate([
    bind
], Config.prototype, "setPlugin", null);
__decorate([
    bind
], Config.prototype, "setPlugins", null);
__decorate([
    bind
], Config.prototype, "unsetPlugin", null);
__decorate([
    bind
], Config.prototype, "setPluginOptions", null);
//# sourceMappingURL=config.js.map