/**
 * Babel transpiler options
 *
 * @public
 */
export declare type Options = {
    plugins?: Plugin[];
    config?: boolean | string;
};
/**
 * Normalized babel plugin
 *
 * @remarks
 * Expressed as a tuple of `[name, options]`
 *
 * @public
 */
export declare type NormalizedPlugin = [any, Record<string, any>];
/**
 * Babel plugin value
 *
 * @see https://babeljs.io/docs/en/plugins
 *
 * @public
 */
export declare type Plugin = string | NormalizedPlugin | CallableFunction;
/**
 * Registrable plugin value
 *
 * @see https://babeljs.io/docs/en/plugins#using-a-plugin
 *
 * @public
 */
export declare type Registrable = string | NormalizedPlugin;
/**
 * Plugins and presets registry interface
 *
 * @public
 */
export interface Registry {
    [key: string]: [string, any?];
}
/**
 * Babel configuration
 *
 * @remarks
 * Configures plugins and presets for the Babel transpiler.
 *
 * @example
 * ```ts
 * bud.babel.setPreset(
 *   '@babel/preset-env',
 *   (await bud.babel.resolve('@babel/preset-env')),
 * )
 * ```
 *
 * @public
 */
export declare class Config {
    /**
     * Plugins registry
     *
     * @public
     */
    plugins: Registry;
    /**
     * Presets registry
     *
     * @public
     */
    presets: Registry;
    /**
     * Set a babel preset
     *
     * @param name - babel preset name
     * @param preset - path to the babel preset or the preset itself
     * @returns The babel configuration class
     *
     * @public
     * @decorator `@bind`
     */
    setPreset(name: string, preset?: [string, any] | string): this;
    /**
     * Set babel presets
     *
     * @remarks
     * Completely overrides existing registry
     *
     * @public
     * @decorator `@bind`
     */
    setPresets(presets: {
        [key: string]: [string, any] | string;
    }): this;
    /**
     * Remove a babel preset
     *
     * @param preset - preset name
     * @returns The babel configuration class
     *
     * @public
     * @decorator `@bind`
     */
    unsetPreset(preset: string): this;
    /**
     * Set options on a babel preset
     *
     * @param preset - preset name
     * @param options - preset options
     * @returns The babel configuration class
     *
     * @public
     * @decorator `@bind`
     */
    setPresetOptions(preset: string, options: any): this;
    /**
     * Set a babel plugin
     *
     * @param name - babel plugin name
     * @param plugin - path to the babel plugin or the plugin itself
     * @returns The babel configuration class
     *
     * @public
     * @decorator `@bind`
     */
    setPlugin(name: string | [any, any], plugin?: [any, any] | string): this;
    /**
     * Set babel presets
     *
     * @remarks
     * Completely overrides existingplugins  registry
     *
     * @public
     * @decorator `@bind`
     */
    setPlugins(plugins: {
        [key: string]: [any, any] | string;
    }): this;
    /**
     * Remove a babel plugin
     *
     * @param plugin - plugin name
     * @returns The babel configuration class
     *
     * @public
     * @decorator `@bind`
     */
    unsetPlugin(plugin: string): this;
    /**
     * Set options on a babel plugin
     *
     * @param plugin - plugin name
     * @param options - plugin options
     * @returns The babel configuration class
     *
     * @public
     * @decorator `@bind`
     */
    setPluginOptions(plugin: string, options: any): this;
}
//# sourceMappingURL=config.d.ts.map