import { __decorate } from "tslib";
import { Extension } from '@roots/bud-framework/extension';
import { bind, dependsOn, dependsOnOptional, expose, label, options, when, } from '@roots/bud-framework/extension/decorators';
import TerserPlugin from 'terser-webpack-plugin';
/**
 * Terser extension
 *
 * @public
 * @decorator `@label`
 * @decorator `@expose`
 * @decorator `@options`
 */
let Terser = class Terser extends Extension {
    /**
     * Terser options getter/setter
     */
    get terserOptions() {
        return this.getOption(`terserOptions`);
    }
    set terserOptions(terserOptions) {
        this.setOption(`terserOptions`, terserOptions);
    }
    /**
     * SWC available
     */
    get isSWC() {
        return this.app.extensions.has(`@roots/bud-swc`);
    }
    /**
     * `register` callback
     *
     * @public
     * @decorator `@bind`
     */
    async register() {
        if (!this.isSWC)
            return;
        const { swcMinify } = await import(`terser-webpack-plugin`);
        this.setMinifier(swcMinify);
    }
    /**
     * `buildBefore` callback
     *
     * @public
     * @decorator `@bind`
     */
    async buildBefore() {
        this.app.hooks.on(`build.optimization.minimizer`, minimizer => {
            minimizer.push(new TerserPlugin(this.options));
            return minimizer;
        });
    }
    /**
     * Set minify implementation
     *
     * @public
     * @decorator `@bind`
     */
    setMinifier(minify) {
        this.terserOptions = { ...(this.terserOptions ?? {}), minify };
        return this;
    }
    /**
     * Drop console
     *
     * @public
     * @decorator `@bind`
     */
    dropConsole(enable = true) {
        this.terserOptions = {
            ...(this.terserOptions ?? {}),
            compress: {
                ...(this.terserOptions.compress ?? {}),
                drop_console: enable,
            },
        };
        return this;
    }
    /**
     * Drop comments
     *
     * @public
     * @decorator `@bind`
     */
    dropComments(enable = true) {
        this.comments(enable === false);
        return this;
    }
    /**
     * Output comments
     *
     * @public
     * @decorator `@bind`
     */
    comments(comments = true) {
        this.terserOptions = {
            ...(this.terserOptions ?? {}),
            output: {
                ...(this.terserOptions.output ?? {}),
                comments,
            },
        };
        return this;
    }
    /**
     * Output debugger statements
     *
     * @public
     * @decorator `@bind`
     */
    debugger(enable = true) {
        this.terserOptions = {
            ...(this.terserOptions ?? {}),
            output: {
                ...(this.terserOptions.output ?? {}),
                debugger: enable,
            },
        };
        return this;
    }
    /**
     * Drop debugger statements
     *
     * @public
     * @decorator `@bind`
     */
    dropDebugger(enable = true) {
        this.debugger(enable === false);
        return this;
    }
    /**
     * Mangle output
     *
     * @public
     * @decorator `@bind`
     */
    mangle(mangle) {
        this.terserOptions = {
            ...(this.terserOptions ?? {}),
            mangle,
        };
        return this;
    }
};
__decorate([
    bind
], Terser.prototype, "register", null);
__decorate([
    bind
], Terser.prototype, "buildBefore", null);
__decorate([
    bind
], Terser.prototype, "setMinifier", null);
__decorate([
    bind
], Terser.prototype, "dropConsole", null);
__decorate([
    bind
], Terser.prototype, "dropComments", null);
__decorate([
    bind
], Terser.prototype, "comments", null);
__decorate([
    bind
], Terser.prototype, "debugger", null);
__decorate([
    bind
], Terser.prototype, "dropDebugger", null);
__decorate([
    bind
], Terser.prototype, "mangle", null);
Terser = __decorate([
    label(`@roots/bud-terser`),
    dependsOn([`@roots/bud-terser/css-minimizer`]),
    dependsOnOptional([`@roots/bud-swc`]),
    expose(`terser`),
    options({
        include: ({ hooks }) => hooks.filter(`pattern.js`),
        exclude: ({ hooks }) => hooks.filter(`pattern.modules`),
        extractComments: false,
        parallel: true,
        terserOptions: {
            compress: false,
            mangle: {
                safari10: true,
            },
            output: {
                comments: false,
                ascii_only: true,
                preamble: `/**
  * Minified by @roots/bud
  */`,
            },
        },
    }),
    when(async () => false)
], Terser);
export default Terser;
//# sourceMappingURL=extension.js.map