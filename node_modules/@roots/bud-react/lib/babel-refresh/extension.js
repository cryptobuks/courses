import { __decorate } from "tslib";
import { Extension } from '@roots/bud-framework/extension';
import { bind, development, label, } from '@roots/bud-framework/extension/decorators';
/**
 * Register `react-refresh-typescript` transform with TSC compiler
 *
 * @remarks
 * Used when `@roots/bud-typescript` is being used with babel loader
 * disabled
 *
 * @public
 * @decorator `@label`
 * @decorator `@development`
 */
let BudBabelRefresh = class BudBabelRefresh extends Extension {
    /**
     * `init` callback
     *
     * @public
     * @decorator `@bind`
     */
    async init() {
        this.logger.log(`Registering react-refresh-babel transformer`);
        if (!this.app.react.useBabel)
            return;
        await this.app.react.ensureBabelIsLoaded();
        this.app.babel.setPlugin(`react-refresh/babel`, await this.resolve(`react-refresh/babel`));
    }
};
__decorate([
    bind
], BudBabelRefresh.prototype, "init", null);
BudBabelRefresh = __decorate([
    label(`@roots/bud-react/babel-refresh`),
    development
], BudBabelRefresh);
export default BudBabelRefresh;
//# sourceMappingURL=extension.js.map