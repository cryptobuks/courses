import RefreshPlugin from '@pmmmwh/react-refresh-webpack-plugin';
import type { ReactRefreshPluginOptions as Options } from '@pmmmwh/react-refresh-webpack-plugin/types/lib/types';
import type { Bud } from '@roots/bud-framework';
import { Extension } from '@roots/bud-framework/extension';
/**
 * Wrapper for `@pmmmwh/react-refresh-webpack-plugin`
 *
 * @remarks
 * Does not execute if `bud.mode` is not `development`
 *
 * @public
 * @decorator `@label`
 * @decorator `@plugin`
 * @decorator `@options`
 * @decorator `@development`
 */
export default class BudReactRefresh extends Extension<Options, RefreshPlugin> {
    /**
     * Extension to handle transformer
     *
     * @public
     */
    transformExtension?: Extension;
    /**
     * Set extension to handle react-refresh code transforms
     *
     * @public
     */
    setTransformExtension(extension: Extension): void;
    /**
     * `configAfter` callback
     *
     * @public
     * @decorator `@bind`
     */
    configAfter(): Promise<void>;
    /**
     * Configure react-refresh-webpack-plugin
     *
     * @example
     * Add react-refresh-webpack-plugin
     *
     * ```ts
     * bud.react.refresh(true)
     * ```
     *
     * @example
     * Remove react-refresh-webpack-plugin
     *
     * ```ts
     * bud.react.refresh(false)
     * ```
     *
     * @example
     * Configure react-refresh-webpack-plugin
     *
     * ```ts
     * bud.react.refresh({
     *   overlay: true,
     * })
     * ```
     *
     * @remarks
     * Configuration takes place during the `config.after` event
     *
     * @public
     * @decorator `@bind`
     */
    configure(userOptions?: Options | boolean): this;
    /**
     * Callback handling react-refresh-webpack-plugin configuration
     *
     * @public
     * @decorator `@bind`
     */
    protected makeReactRefreshCallback(userOptions?: Options | boolean): (bud: Bud) => Promise<unknown>;
}
//# sourceMappingURL=extension.d.ts.map