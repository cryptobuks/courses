import { __decorate } from "tslib";
import { Extension } from '@roots/bud-framework/extension';
import { bind, development, label, } from '@roots/bud-framework/extension/decorators';
/**
 * Register `react-refresh-typescript` transform with TSC compiler
 *
 * @remarks
 * Used when `@roots/bud-typescript` is being used with babel loader
 * disabled
 *
 * @public
 * @decorator `@label`
 * @decorator `@development`
 */
let BudTypeScriptRefresh = class BudTypeScriptRefresh extends Extension {
    /**
     * `buildBefore` callback
     *
     * @public
     * @decorator `@bind`
     */
    async init() {
        this.app.hooks.action(`build.before`, this.registerTransform);
    }
    /**
     * Register tsc react-refresh transform
     *
     * @public
     * @decorator `@bind`
     */
    async registerTransform() {
        this.logger.log(`Registering react-refresh-typescript transformer`);
        const transform = await this.import(`react-refresh-typescript`);
        this.app.extensions
            .get(`@roots/bud-typescript`)
            .setOption(`loader`, options => ({
            ...(options ?? {}),
            getCustomTransformers: { before: [transform()] },
        }));
    }
};
__decorate([
    bind
], BudTypeScriptRefresh.prototype, "init", null);
__decorate([
    bind
], BudTypeScriptRefresh.prototype, "registerTransform", null);
BudTypeScriptRefresh = __decorate([
    label(`@roots/bud-react/typescript-refresh`),
    development
], BudTypeScriptRefresh);
export default BudTypeScriptRefresh;
//# sourceMappingURL=extension.js.map