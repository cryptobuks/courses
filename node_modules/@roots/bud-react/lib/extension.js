import { __decorate } from "tslib";
import { Extension } from '@roots/bud-framework/extension';
import { bind, dependsOn, expose, label, optIn, options, } from '@roots/bud-framework/extension/decorators';
import { isUndefined } from '@roots/bud-support/lodash-es';
/**
 * `BudReact` adds the `@babel/preset-react` preset to the babel configuration
 * and registers the `@roots/bud-react/react-refresh` extension
 *
 * @remarks
 * If `@roots/bud-esbuild` or `@roots/bud-swc` is registered, the babel preset registration is skipped
 *
 * @public
 * @decorator `@label`
 * @decorator `@dependsOn`
 * @decorator `@dependsOnOptional`
 * @decorator `@options`
 * @decorator `@expose`
 */
let BudReact = class BudReact extends Extension {
    /**
     * Use babel
     *
     * @readonly
     * @public
     */
    get useBabel() {
        if (!isUndefined(this.options.babel))
            return this.options.babel;
        if (this.app.extensions.has(`@roots/bud-typescript`)) {
            return this.app.extensions.get(`@roots/bud-typescript`).options.babel;
        }
        if (this.app.extensions.has(`@roots/bud-swc`))
            return false;
        return true;
    }
    /**
     * Accessor for `@roots/bud-react/react-refresh`
     *
     * @readonly
     * @public
     */
    get refresh() {
        return this.app.extensions.get(`@roots/bud-react/react-refresh`);
    }
    /**
     * `configAfter` callback
     *
     * @remarks
     * Adds the `@babel/preset-react` preset to babel if `@roots/bud-esbuild` is not
     * registered and `@roots/bud-babel` is available.
     *
     * @public
     * @decorator `@bind`
     */
    async configAfter() {
        if (!this.useBabel)
            return;
        await this.ensureBabelIsLoaded();
        const Preset = await this.resolve(`@babel/preset-react`);
        this.app.babel.setPreset(`@babel/preset-react`, Preset);
    }
    /**
     * Ensure babel extension is loaded
     *
     * @public
     * @decorator `@bind`
     */
    async ensureBabelIsLoaded() {
        if (this.app.extensions.has(`@roots/bud-babel`))
            return;
        await this.app.extensions.add(await this.import(`@roots/bud-babel`));
    }
};
__decorate([
    bind
], BudReact.prototype, "configAfter", null);
__decorate([
    bind
], BudReact.prototype, "ensureBabelIsLoaded", null);
BudReact = __decorate([
    label(`@roots/bud-react`),
    dependsOn([`@roots/bud-react/react-refresh`]),
    optIn([`@roots/bud-esbuild`, `@roots/bud-swc`]),
    options({ babel: undefined }),
    expose(`react`)
], BudReact);
export default BudReact;
//# sourceMappingURL=extension.js.map