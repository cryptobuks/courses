import { __decorate } from "tslib";
import { Extension } from '@roots/bud-framework/extension';
import { bind, development, label, } from '@roots/bud-framework/extension/decorators';
/**
 * Register `react-refresh-SWC` transform with TSC compiler
 *
 * @remarks
 * Used when `@roots/bud-SWC` is being used with babel loader
 * disabled
 *
 * @public
 * @decorator `@label`
 * @decorator `@development`
 */
let BudSWCRefresh = class BudSWCRefresh extends Extension {
    /**
     * `buildBefore` callback
     *
     * @public
     * @decorator `@bind`
     */
    async init() {
        this.app.hooks.action(`build.before`, this.registerTransform);
    }
    /**
     * Register tsc react-refresh transform
     *
     * @public
     * @decorator `@bind`
     */
    async registerTransform() {
        await this.app.swc.hasRC().then(hasRc => {
            if (hasRc)
                return;
            this.logger.log(`Registering swc react-refresh transformer`);
            this.app.swc.setOptions(options => ({
                ...options,
                transform: {
                    react: {
                        development: this.app.isDevelopment,
                        refresh: this.app.isDevelopment,
                    },
                },
            }));
        });
    }
};
__decorate([
    bind
], BudSWCRefresh.prototype, "init", null);
__decorate([
    bind
], BudSWCRefresh.prototype, "registerTransform", null);
BudSWCRefresh = __decorate([
    label(`@roots/bud-react/swc-refresh`),
    development
], BudSWCRefresh);
export default BudSWCRefresh;
//# sourceMappingURL=extension.js.map