import { __decorate } from "tslib";
import { Extension } from '@roots/bud-framework';
import { bind, dependsOnOptional, expose, label, options, plugin, when, } from '@roots/bud-framework/extension/decorators';
import { isBoolean, isFunction } from '@roots/bud-support/lodash-es';
import Container from '@roots/container';
import { ThemeJsonWebpackPlugin } from './plugin.js';
import * as tailwindAdapter from './tailwind/index.js';
/**
 * WP Theme JSON plugin adapter
 *
 * @remarks
 * Produces a WordPress `theme.json`
 *
 * @example
 * ```ts
 * bud.themeJson(theme =>
 *   theme.set('color', {})
 * )
 * ```
 *
 * @public
 * @decorator `@label`
 * @decorator `@options`
 * @decorator `@when`
 * @decorator `@plugin`
 * @decorator `@expose`
 */
let ThemeJson = class ThemeJson extends Extension {
    settings(input, raw) {
        if (!input)
            return this;
        this.when = async () => true;
        const value = isFunction(input)
            ? input(raw
                ? this.options.settings
                : this.app.container(this.options.settings))
            : isBoolean(input)
                ? this.options.settings
                : input;
        this.setOption(`settings`, value instanceof Container ? value.all() : value);
        return this;
    }
    useTailwindColors(extendOnly) {
        if (!this.app.extensions.has(`@roots/bud-tailwindcss`))
            throw new Error(`@roots/bud-tailwindcss is required in order to call \`useTailwindColors\``);
        this.setOption(`settings`, {
            ...(this.options.settings ?? {}),
            color: {
                ...(this.options.settings?.color ?? {}),
                palette: tailwindAdapter.palette.transform(this.app.tailwind.resolveThemeValue(`colors`, extendOnly)),
            },
        });
        return this;
    }
    useTailwindFontFamily(extendOnly) {
        this.setOption(`settings`, {
            ...(this.options.settings ?? {}),
            typography: {
                ...(this.options.settings?.typography ?? {}),
                fontFamilies: tailwindAdapter.fontFamily.transform(Object.assign({}, {
                    ...this.app.tailwind.resolveThemeValue(`fontFamily`, extendOnly),
                })),
            },
        });
        return this;
    }
    useTailwindFontSize(extendOnly) {
        this.setOption(`settings`, {
            ...(this.options.settings ?? {}),
            typography: {
                ...(this.options.settings?.typography ?? {}),
                fontSizes: tailwindAdapter.fontSize.transform(Object.assign({}, {
                    ...this.app.tailwind.resolveThemeValue(`fontSize`, extendOnly),
                })),
            },
        });
        return this;
    }
};
__decorate([
    bind
], ThemeJson.prototype, "settings", null);
__decorate([
    bind
], ThemeJson.prototype, "useTailwindColors", null);
__decorate([
    bind
], ThemeJson.prototype, "useTailwindFontFamily", null);
__decorate([
    bind
], ThemeJson.prototype, "useTailwindFontSize", null);
ThemeJson = __decorate([
    label(`@roots/sage/wp-theme-json`),
    dependsOnOptional([`@roots/bud-tailwindcss`]),
    options({
        path: ({ path }) => path(`./theme.json`),
        settings: {
            color: {
                custom: false,
                customGradient: false,
            },
            custom: {
                spacing: {},
                typography: { 'font-size': {}, 'line-height': {} },
            },
            spacing: {
                padding: true,
                units: [`px`, `%`, `em`, `rem`, `vw`, `vh`],
            },
            typography: {
                customFontSize: false,
                dropCap: false,
            },
        },
    }),
    when(async () => false),
    plugin(ThemeJsonWebpackPlugin),
    expose(`wpjson`)
], ThemeJson);
export default ThemeJson;
