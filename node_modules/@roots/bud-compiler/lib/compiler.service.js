import { __decorate } from "tslib";
import { Service } from '@roots/bud-framework/service';
import { bind } from '@roots/bud-support/decorators';
/**
 * Wepback compilation controller class
 *
 * @public
 */
export class Compiler extends Service {
    constructor() {
        super(...arguments);
        /**
         * Configuration
         *
         * @public
         */
        this.config = [];
    }
    /**
     * Initiates compilation
     *
     * @returns the compiler instance
     *
     * @public
     * @decorator `@bind`
     * @decorator `@once`
     */
    async compile() {
        const webpack = await import(`webpack`);
        this.implementation = webpack.default;
        this.logger.log(`imported webpack`, webpack.default.version);
        this.config = [];
        if (!this.app.hasChildren) {
            this.logger.log(`no children found, processing parent instance`);
            const config = await this.app.build.make();
            this.config.push(config);
        }
        else {
            await Promise.all(Object.values(this.app.children).map(async (child) => {
                const config = await child.build.make();
                this.logger.log(`child config`, child.label);
                this.logger.info(child.label, child.build.config);
                this.config.push(config);
            }));
        }
        await this.app.hooks.fire(`compiler.before`);
        if (this.app.context.args.dry) {
            this.logger.log(`running in dry mode. exiting early.`);
            return;
        }
        this.instance = this.implementation(this.config);
        this.app.isDevelopment &&
            this.instance.hooks.done.tap(`${this.app.label}-dev-handle`, this.handleStats);
        this.instance.hooks.done.tap(this.app.label, async (stats) => {
            this.handleStats(stats);
            await this.app.hooks.fire(`compiler.close`);
        });
        await this.app.hooks.fire(`compiler.after`);
        return this.instance;
    }
    /**
     * Webpack callback
     *
     * @public
     * @decorator `@bind`
     * @decorator `@once`
     */
    callback(error, stats) {
        if (error)
            this.onError(error);
        if (stats)
            this.handleStats(stats);
    }
    /**
     * Stats handler
     *
     * @public
     * @decorator `@bind`
     */
    handleStats(stats) {
        if (!stats)
            return;
        this.stats = stats;
        this.app.dashboard.stats({ stats });
    }
    /**
     * Compiler close event
     *
     * @public
     * @decorator `@bind`
     */
    onClose(error) {
        if (error)
            return this.onError(error);
    }
    /**
     * Compiler error event
     *
     * @public
     * @decorator `@bind`
     */
    onError(error) {
        this.app.isDevelopment &&
            this.app.server.appliedMiddleware?.hot?.publish({ error });
        this.app.isProduction && this.app.fatal(error);
    }
}
/**
 * Service label
 *
 * @public
 */
Compiler.label = `compiler`;
__decorate([
    bind
], Compiler.prototype, "compile", null);
__decorate([
    bind
], Compiler.prototype, "callback", null);
__decorate([
    bind
], Compiler.prototype, "handleStats", null);
__decorate([
    bind
], Compiler.prototype, "onClose", null);
__decorate([
    bind
], Compiler.prototype, "onError", null);
//# sourceMappingURL=compiler.service.js.map